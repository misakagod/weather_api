/* soapC.cpp
   Generated by gSOAP 2.8.70 for weather.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.70 2018-10-28 10:26:20 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__ArrayOfString:
		return soap_in_ns1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__getWeather:
		return soap_in_PointerTo_ns1__getWeather(soap, NULL, NULL, "ns1:getWeather");
	case SOAP_TYPE_PointerTo_ns1__getSupportCityString:
		return soap_in_PointerTo_ns1__getSupportCityString(soap, NULL, NULL, "ns1:getSupportCityString");
	case SOAP_TYPE_PointerTo_ns1__getSupportCityDataset:
		return soap_in_PointerTo_ns1__getSupportCityDataset(soap, NULL, NULL, "ns1:getSupportCityDataset");
	case SOAP_TYPE_PointerTo_ns1__getRegionCountry:
		return soap_in_PointerTo_ns1__getRegionCountry(soap, NULL, NULL, "ns1:getRegionCountry");
	case SOAP_TYPE_PointerTo_ns1__getRegionProvince:
		return soap_in_PointerTo_ns1__getRegionProvince(soap, NULL, NULL, "ns1:getRegionProvince");
	case SOAP_TYPE_PointerTo_ns1__getRegionDataset:
		return soap_in_PointerTo_ns1__getRegionDataset(soap, NULL, NULL, "ns1:getRegionDataset");
	case SOAP_TYPE_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		return soap_in_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, NULL, NULL, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_in_PointerTons1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult:
		return soap_in_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, NULL, NULL, "ns1:getRegionDatasetResponse-getRegionDatasetResult");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfString"))
		{	*type = SOAP_TYPE_ns1__ArrayOfString;
			return soap_in_ns1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult"))
		{	*type = SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult;
			return soap_in__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionDatasetResponse-getRegionDatasetResult"))
		{	*type = SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult;
			return soap_in__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DataSet"))
		{	*type = SOAP_TYPE__ns1__DataSet;
			return soap_in__ns1__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getWeatherResponse"))
		{	*type = SOAP_TYPE__ns1__getWeatherResponse;
			return soap_in__ns1__getWeatherResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getWeather"))
		{	*type = SOAP_TYPE__ns1__getWeather;
			return soap_in__ns1__getWeather(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportCityStringResponse"))
		{	*type = SOAP_TYPE__ns1__getSupportCityStringResponse;
			return soap_in__ns1__getSupportCityStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportCityString"))
		{	*type = SOAP_TYPE__ns1__getSupportCityString;
			return soap_in__ns1__getSupportCityString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportCityDatasetResponse"))
		{	*type = SOAP_TYPE__ns1__getSupportCityDatasetResponse;
			return soap_in__ns1__getSupportCityDatasetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getSupportCityDataset"))
		{	*type = SOAP_TYPE__ns1__getSupportCityDataset;
			return soap_in__ns1__getSupportCityDataset(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionCountryResponse"))
		{	*type = SOAP_TYPE__ns1__getRegionCountryResponse;
			return soap_in__ns1__getRegionCountryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionCountry"))
		{	*type = SOAP_TYPE__ns1__getRegionCountry;
			return soap_in__ns1__getRegionCountry(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionProvinceResponse"))
		{	*type = SOAP_TYPE__ns1__getRegionProvinceResponse;
			return soap_in__ns1__getRegionProvinceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionProvince"))
		{	*type = SOAP_TYPE__ns1__getRegionProvince;
			return soap_in__ns1__getRegionProvince(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionDatasetResponse"))
		{	*type = SOAP_TYPE__ns1__getRegionDatasetResponse;
			return soap_in__ns1__getRegionDatasetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getRegionDataset"))
		{	*type = SOAP_TYPE__ns1__getRegionDataset;
			return soap_in__ns1__getRegionDataset(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		return ((_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *)ptr)->soap_out(soap, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult", id, "");
	case SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult:
		return ((_ns1__getRegionDatasetResponse_getRegionDatasetResult *)ptr)->soap_out(soap, "ns1:getRegionDatasetResponse-getRegionDatasetResult", id, "");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__DataSet:
		return ((_ns1__DataSet *)ptr)->soap_out(soap, "ns1:DataSet", id, "");
	case SOAP_TYPE__ns1__getWeatherResponse:
		return ((_ns1__getWeatherResponse *)ptr)->soap_out(soap, "ns1:getWeatherResponse", id, "");
	case SOAP_TYPE__ns1__getWeather:
		return ((_ns1__getWeather *)ptr)->soap_out(soap, "ns1:getWeather", id, "");
	case SOAP_TYPE__ns1__getSupportCityStringResponse:
		return ((_ns1__getSupportCityStringResponse *)ptr)->soap_out(soap, "ns1:getSupportCityStringResponse", id, "");
	case SOAP_TYPE__ns1__getSupportCityString:
		return ((_ns1__getSupportCityString *)ptr)->soap_out(soap, "ns1:getSupportCityString", id, "");
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse:
		return ((_ns1__getSupportCityDatasetResponse *)ptr)->soap_out(soap, "ns1:getSupportCityDatasetResponse", id, "");
	case SOAP_TYPE__ns1__getSupportCityDataset:
		return ((_ns1__getSupportCityDataset *)ptr)->soap_out(soap, "ns1:getSupportCityDataset", id, "");
	case SOAP_TYPE__ns1__getRegionCountryResponse:
		return ((_ns1__getRegionCountryResponse *)ptr)->soap_out(soap, "ns1:getRegionCountryResponse", id, "");
	case SOAP_TYPE__ns1__getRegionCountry:
		return ((_ns1__getRegionCountry *)ptr)->soap_out(soap, "ns1:getRegionCountry", id, "");
	case SOAP_TYPE__ns1__getRegionProvinceResponse:
		return ((_ns1__getRegionProvinceResponse *)ptr)->soap_out(soap, "ns1:getRegionProvinceResponse", id, "");
	case SOAP_TYPE__ns1__getRegionProvince:
		return ((_ns1__getRegionProvince *)ptr)->soap_out(soap, "ns1:getRegionProvince", id, "");
	case SOAP_TYPE__ns1__getRegionDatasetResponse:
		return ((_ns1__getRegionDatasetResponse *)ptr)->soap_out(soap, "ns1:getRegionDatasetResponse", id, "");
	case SOAP_TYPE__ns1__getRegionDataset:
		return ((_ns1__getRegionDataset *)ptr)->soap_out(soap, "ns1:getRegionDataset", id, "");
	case SOAP_TYPE_ns1__ArrayOfString:
		return ((ns1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__getWeather:
		return soap_out_PointerTo_ns1__getWeather(soap, tag, id, (_ns1__getWeather *const*)ptr, "ns1:getWeather");
	case SOAP_TYPE_PointerTo_ns1__getSupportCityString:
		return soap_out_PointerTo_ns1__getSupportCityString(soap, tag, id, (_ns1__getSupportCityString *const*)ptr, "ns1:getSupportCityString");
	case SOAP_TYPE_PointerTo_ns1__getSupportCityDataset:
		return soap_out_PointerTo_ns1__getSupportCityDataset(soap, tag, id, (_ns1__getSupportCityDataset *const*)ptr, "ns1:getSupportCityDataset");
	case SOAP_TYPE_PointerTo_ns1__getRegionCountry:
		return soap_out_PointerTo_ns1__getRegionCountry(soap, tag, id, (_ns1__getRegionCountry *const*)ptr, "ns1:getRegionCountry");
	case SOAP_TYPE_PointerTo_ns1__getRegionProvince:
		return soap_out_PointerTo_ns1__getRegionProvince(soap, tag, id, (_ns1__getRegionProvince *const*)ptr, "ns1:getRegionProvince");
	case SOAP_TYPE_PointerTo_ns1__getRegionDataset:
		return soap_out_PointerTo_ns1__getRegionDataset(soap, tag, id, (_ns1__getRegionDataset *const*)ptr, "ns1:getRegionDataset");
	case SOAP_TYPE_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		return soap_out_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag, id, (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*)ptr, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_out_PointerTons1__ArrayOfString(soap, tag, id, (ns1__ArrayOfString *const*)ptr, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult:
		return soap_out_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag, id, (_ns1__getRegionDatasetResponse_getRegionDatasetResult *const*)ptr, "ns1:getRegionDatasetResponse-getRegionDatasetResult");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		((_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult:
		((_ns1__getRegionDatasetResponse_getRegionDatasetResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE__ns1__DataSet:
		((_ns1__DataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getWeatherResponse:
		((_ns1__getWeatherResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getWeather:
		((_ns1__getWeather *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportCityStringResponse:
		((_ns1__getSupportCityStringResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportCityString:
		((_ns1__getSupportCityString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse:
		((_ns1__getSupportCityDatasetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getSupportCityDataset:
		((_ns1__getSupportCityDataset *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionCountryResponse:
		((_ns1__getRegionCountryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionCountry:
		((_ns1__getRegionCountry *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionProvinceResponse:
		((_ns1__getRegionProvinceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionProvince:
		((_ns1__getRegionProvince *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionDatasetResponse:
		((_ns1__getRegionDatasetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getRegionDataset:
		((_ns1__getRegionDataset *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		((ns1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__getWeather_:
		soap_serialize___ns1__getWeather_(soap, (const struct __ns1__getWeather_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportCityString_:
		soap_serialize___ns1__getSupportCityString_(soap, (const struct __ns1__getSupportCityString_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportCityDataset_:
		soap_serialize___ns1__getSupportCityDataset_(soap, (const struct __ns1__getSupportCityDataset_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getRegionCountry_:
		soap_serialize___ns1__getRegionCountry_(soap, (const struct __ns1__getRegionCountry_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getRegionProvince_:
		soap_serialize___ns1__getRegionProvince_(soap, (const struct __ns1__getRegionProvince_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getRegionDataset_:
		soap_serialize___ns1__getRegionDataset_(soap, (const struct __ns1__getRegionDataset_ *)ptr);
		break;
	case SOAP_TYPE___ns1__getWeather:
		soap_serialize___ns1__getWeather(soap, (const struct __ns1__getWeather *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportCityString:
		soap_serialize___ns1__getSupportCityString(soap, (const struct __ns1__getSupportCityString *)ptr);
		break;
	case SOAP_TYPE___ns1__getSupportCityDataset:
		soap_serialize___ns1__getSupportCityDataset(soap, (const struct __ns1__getSupportCityDataset *)ptr);
		break;
	case SOAP_TYPE___ns1__getRegionCountry:
		soap_serialize___ns1__getRegionCountry(soap, (const struct __ns1__getRegionCountry *)ptr);
		break;
	case SOAP_TYPE___ns1__getRegionProvince:
		soap_serialize___ns1__getRegionProvince(soap, (const struct __ns1__getRegionProvince *)ptr);
		break;
	case SOAP_TYPE___ns1__getRegionDataset:
		soap_serialize___ns1__getRegionDataset(soap, (const struct __ns1__getRegionDataset *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getWeather:
		soap_serialize_PointerTo_ns1__getWeather(soap, (_ns1__getWeather *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportCityString:
		soap_serialize_PointerTo_ns1__getSupportCityString(soap, (_ns1__getSupportCityString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportCityDataset:
		soap_serialize_PointerTo_ns1__getSupportCityDataset(soap, (_ns1__getSupportCityDataset *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getRegionCountry:
		soap_serialize_PointerTo_ns1__getRegionCountry(soap, (_ns1__getRegionCountry *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getRegionProvince:
		soap_serialize_PointerTo_ns1__getRegionProvince(soap, (_ns1__getRegionProvince *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getRegionDataset:
		soap_serialize_PointerTo_ns1__getRegionDataset(soap, (_ns1__getRegionDataset *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		soap_serialize_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		soap_serialize_PointerTons1__ArrayOfString(soap, (ns1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult:
		soap_serialize_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, (_ns1__getRegionDatasetResponse_getRegionDatasetResult *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfString:
		return (void*)soap_instantiate_ns1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionDataset:
		return (void*)soap_instantiate__ns1__getRegionDataset(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult:
		return (void*)soap_instantiate__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionDatasetResponse:
		return (void*)soap_instantiate__ns1__getRegionDatasetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionProvince:
		return (void*)soap_instantiate__ns1__getRegionProvince(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionProvinceResponse:
		return (void*)soap_instantiate__ns1__getRegionProvinceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionCountry:
		return (void*)soap_instantiate__ns1__getRegionCountry(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getRegionCountryResponse:
		return (void*)soap_instantiate__ns1__getRegionCountryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCityDataset:
		return (void*)soap_instantiate__ns1__getSupportCityDataset(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		return (void*)soap_instantiate__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse:
		return (void*)soap_instantiate__ns1__getSupportCityDatasetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCityString:
		return (void*)soap_instantiate__ns1__getSupportCityString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getSupportCityStringResponse:
		return (void*)soap_instantiate__ns1__getSupportCityStringResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getWeather:
		return (void*)soap_instantiate__ns1__getWeather(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getWeatherResponse:
		return (void*)soap_instantiate__ns1__getWeatherResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DataSet:
		return (void*)soap_instantiate__ns1__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRegionDataset:
		return (void*)soap_instantiate___ns1__getRegionDataset(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRegionProvince:
		return (void*)soap_instantiate___ns1__getRegionProvince(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRegionCountry:
		return (void*)soap_instantiate___ns1__getRegionCountry(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportCityDataset:
		return (void*)soap_instantiate___ns1__getSupportCityDataset(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportCityString:
		return (void*)soap_instantiate___ns1__getSupportCityString(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getWeather:
		return (void*)soap_instantiate___ns1__getWeather(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRegionDataset_:
		return (void*)soap_instantiate___ns1__getRegionDataset_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRegionProvince_:
		return (void*)soap_instantiate___ns1__getRegionProvince_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getRegionCountry_:
		return (void*)soap_instantiate___ns1__getRegionCountry_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportCityDataset_:
		return (void*)soap_instantiate___ns1__getSupportCityDataset_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getSupportCityString_:
		return (void*)soap_instantiate___ns1__getSupportCityString_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getWeather_:
		return (void*)soap_instantiate___ns1__getWeather_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__wstring(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__ArrayOfString*>(p->ptr), ns1__ArrayOfString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__ArrayOfString*>(p->ptr), ns1__ArrayOfString);
		break;
	case SOAP_TYPE__ns1__getRegionDataset:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionDataset*>(p->ptr), _ns1__getRegionDataset);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionDataset*>(p->ptr), _ns1__getRegionDataset);
		break;
	case SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionDatasetResponse_getRegionDatasetResult*>(p->ptr), _ns1__getRegionDatasetResponse_getRegionDatasetResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionDatasetResponse_getRegionDatasetResult*>(p->ptr), _ns1__getRegionDatasetResponse_getRegionDatasetResult);
		break;
	case SOAP_TYPE__ns1__getRegionDatasetResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionDatasetResponse*>(p->ptr), _ns1__getRegionDatasetResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionDatasetResponse*>(p->ptr), _ns1__getRegionDatasetResponse);
		break;
	case SOAP_TYPE__ns1__getRegionProvince:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionProvince*>(p->ptr), _ns1__getRegionProvince);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionProvince*>(p->ptr), _ns1__getRegionProvince);
		break;
	case SOAP_TYPE__ns1__getRegionProvinceResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionProvinceResponse*>(p->ptr), _ns1__getRegionProvinceResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionProvinceResponse*>(p->ptr), _ns1__getRegionProvinceResponse);
		break;
	case SOAP_TYPE__ns1__getRegionCountry:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionCountry*>(p->ptr), _ns1__getRegionCountry);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionCountry*>(p->ptr), _ns1__getRegionCountry);
		break;
	case SOAP_TYPE__ns1__getRegionCountryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getRegionCountryResponse*>(p->ptr), _ns1__getRegionCountryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getRegionCountryResponse*>(p->ptr), _ns1__getRegionCountryResponse);
		break;
	case SOAP_TYPE__ns1__getSupportCityDataset:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSupportCityDataset*>(p->ptr), _ns1__getSupportCityDataset);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSupportCityDataset*>(p->ptr), _ns1__getSupportCityDataset);
		break;
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult*>(p->ptr), _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult*>(p->ptr), _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult);
		break;
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSupportCityDatasetResponse*>(p->ptr), _ns1__getSupportCityDatasetResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSupportCityDatasetResponse*>(p->ptr), _ns1__getSupportCityDatasetResponse);
		break;
	case SOAP_TYPE__ns1__getSupportCityString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSupportCityString*>(p->ptr), _ns1__getSupportCityString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSupportCityString*>(p->ptr), _ns1__getSupportCityString);
		break;
	case SOAP_TYPE__ns1__getSupportCityStringResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getSupportCityStringResponse*>(p->ptr), _ns1__getSupportCityStringResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getSupportCityStringResponse*>(p->ptr), _ns1__getSupportCityStringResponse);
		break;
	case SOAP_TYPE__ns1__getWeather:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getWeather*>(p->ptr), _ns1__getWeather);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getWeather*>(p->ptr), _ns1__getWeather);
		break;
	case SOAP_TYPE__ns1__getWeatherResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__getWeatherResponse*>(p->ptr), _ns1__getWeatherResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__getWeatherResponse*>(p->ptr), _ns1__getWeatherResponse);
		break;
	case SOAP_TYPE__ns1__DataSet:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DataSet*>(p->ptr), _ns1__DataSet);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DataSet*>(p->ptr), _ns1__DataSet);
		break;
	case SOAP_TYPE___ns1__getRegionDataset:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRegionDataset*>(p->ptr), struct __ns1__getRegionDataset);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRegionDataset*>(p->ptr), struct __ns1__getRegionDataset);
		break;
	case SOAP_TYPE___ns1__getRegionProvince:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRegionProvince*>(p->ptr), struct __ns1__getRegionProvince);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRegionProvince*>(p->ptr), struct __ns1__getRegionProvince);
		break;
	case SOAP_TYPE___ns1__getRegionCountry:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRegionCountry*>(p->ptr), struct __ns1__getRegionCountry);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRegionCountry*>(p->ptr), struct __ns1__getRegionCountry);
		break;
	case SOAP_TYPE___ns1__getSupportCityDataset:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSupportCityDataset*>(p->ptr), struct __ns1__getSupportCityDataset);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSupportCityDataset*>(p->ptr), struct __ns1__getSupportCityDataset);
		break;
	case SOAP_TYPE___ns1__getSupportCityString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSupportCityString*>(p->ptr), struct __ns1__getSupportCityString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSupportCityString*>(p->ptr), struct __ns1__getSupportCityString);
		break;
	case SOAP_TYPE___ns1__getWeather:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getWeather*>(p->ptr), struct __ns1__getWeather);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getWeather*>(p->ptr), struct __ns1__getWeather);
		break;
	case SOAP_TYPE___ns1__getRegionDataset_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRegionDataset_*>(p->ptr), struct __ns1__getRegionDataset_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRegionDataset_*>(p->ptr), struct __ns1__getRegionDataset_);
		break;
	case SOAP_TYPE___ns1__getRegionProvince_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRegionProvince_*>(p->ptr), struct __ns1__getRegionProvince_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRegionProvince_*>(p->ptr), struct __ns1__getRegionProvince_);
		break;
	case SOAP_TYPE___ns1__getRegionCountry_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getRegionCountry_*>(p->ptr), struct __ns1__getRegionCountry_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getRegionCountry_*>(p->ptr), struct __ns1__getRegionCountry_);
		break;
	case SOAP_TYPE___ns1__getSupportCityDataset_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSupportCityDataset_*>(p->ptr), struct __ns1__getSupportCityDataset_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSupportCityDataset_*>(p->ptr), struct __ns1__getSupportCityDataset_);
		break;
	case SOAP_TYPE___ns1__getSupportCityString_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getSupportCityString_*>(p->ptr), struct __ns1__getSupportCityString_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getSupportCityString_*>(p->ptr), struct __ns1__getSupportCityString_);
		break;
	case SOAP_TYPE___ns1__getWeather_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__getWeather_*>(p->ptr), struct __ns1__getWeather_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__getWeather_*>(p->ptr), struct __ns1__getWeather_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::wstring> *>(p->ptr), std::vector<std::wstring> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::wstring> *>(p->ptr), std::vector<std::wstring> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		if (t == SOAP_TYPE_std__wstring)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::wstring>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::wstring> *)p)[index] = *(std::wstring *)q;
		}
		break;
	case SOAP_TYPE_std__wstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::wstring type=%d location=%p object=%p\n", t, p, q));
		*(std::wstring*)p = *(std::wstring*)q;
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__ArrayOfString type=%d location=%p object=%p\n", t, p, q));
		*(ns1__ArrayOfString*)p = *(ns1__ArrayOfString*)q;
		break;
	case SOAP_TYPE__ns1__getRegionDataset:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionDataset type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionDataset*)p = *(_ns1__getRegionDataset*)q;
		break;
	case SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionDatasetResponse_getRegionDatasetResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionDatasetResponse_getRegionDatasetResult*)p = *(_ns1__getRegionDatasetResponse_getRegionDatasetResult*)q;
		break;
	case SOAP_TYPE__ns1__getRegionDatasetResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionDatasetResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionDatasetResponse*)p = *(_ns1__getRegionDatasetResponse*)q;
		break;
	case SOAP_TYPE__ns1__getRegionProvince:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionProvince type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionProvince*)p = *(_ns1__getRegionProvince*)q;
		break;
	case SOAP_TYPE__ns1__getRegionProvinceResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionProvinceResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionProvinceResponse*)p = *(_ns1__getRegionProvinceResponse*)q;
		break;
	case SOAP_TYPE__ns1__getRegionCountry:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionCountry type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionCountry*)p = *(_ns1__getRegionCountry*)q;
		break;
	case SOAP_TYPE__ns1__getRegionCountryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getRegionCountryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getRegionCountryResponse*)p = *(_ns1__getRegionCountryResponse*)q;
		break;
	case SOAP_TYPE__ns1__getSupportCityDataset:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSupportCityDataset type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSupportCityDataset*)p = *(_ns1__getSupportCityDataset*)q;
		break;
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult*)p = *(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult*)q;
		break;
	case SOAP_TYPE__ns1__getSupportCityDatasetResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSupportCityDatasetResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSupportCityDatasetResponse*)p = *(_ns1__getSupportCityDatasetResponse*)q;
		break;
	case SOAP_TYPE__ns1__getSupportCityString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSupportCityString type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSupportCityString*)p = *(_ns1__getSupportCityString*)q;
		break;
	case SOAP_TYPE__ns1__getSupportCityStringResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getSupportCityStringResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getSupportCityStringResponse*)p = *(_ns1__getSupportCityStringResponse*)q;
		break;
	case SOAP_TYPE__ns1__getWeather:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getWeather type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getWeather*)p = *(_ns1__getWeather*)q;
		break;
	case SOAP_TYPE__ns1__getWeatherResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__getWeatherResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__getWeatherResponse*)p = *(_ns1__getWeatherResponse*)q;
		break;
	case SOAP_TYPE__ns1__DataSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DataSet type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DataSet*)p = *(_ns1__DataSet*)q;
		break;
	case SOAP_TYPE___ns1__getRegionDataset:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRegionDataset type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRegionDataset*)p = *(struct __ns1__getRegionDataset*)q;
		break;
	case SOAP_TYPE___ns1__getRegionProvince:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRegionProvince type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRegionProvince*)p = *(struct __ns1__getRegionProvince*)q;
		break;
	case SOAP_TYPE___ns1__getRegionCountry:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRegionCountry type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRegionCountry*)p = *(struct __ns1__getRegionCountry*)q;
		break;
	case SOAP_TYPE___ns1__getSupportCityDataset:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSupportCityDataset type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSupportCityDataset*)p = *(struct __ns1__getSupportCityDataset*)q;
		break;
	case SOAP_TYPE___ns1__getSupportCityString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSupportCityString type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSupportCityString*)p = *(struct __ns1__getSupportCityString*)q;
		break;
	case SOAP_TYPE___ns1__getWeather:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getWeather type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getWeather*)p = *(struct __ns1__getWeather*)q;
		break;
	case SOAP_TYPE___ns1__getRegionDataset_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRegionDataset_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRegionDataset_*)p = *(struct __ns1__getRegionDataset_*)q;
		break;
	case SOAP_TYPE___ns1__getRegionProvince_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRegionProvince_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRegionProvince_*)p = *(struct __ns1__getRegionProvince_*)q;
		break;
	case SOAP_TYPE___ns1__getRegionCountry_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getRegionCountry_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getRegionCountry_*)p = *(struct __ns1__getRegionCountry_*)q;
		break;
	case SOAP_TYPE___ns1__getSupportCityDataset_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSupportCityDataset_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSupportCityDataset_*)p = *(struct __ns1__getSupportCityDataset_*)q;
		break;
	case SOAP_TYPE___ns1__getSupportCityString_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getSupportCityString_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getSupportCityString_*)p = *(struct __ns1__getSupportCityString_*)q;
		break;
	case SOAP_TYPE___ns1__getWeather_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__getWeather_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__getWeather_*)p = *(struct __ns1__getWeather_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema = NULL;
	this->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::__any = NULL;
}

void _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *tag, int id, const _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult), type))
		return soap->error;
	if (!a->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema)
	{	if (soap_element_empty(soap, "xsd:schema"))
			return soap->error;
	}
	else
	if (soap_outliteral(soap, "xsd:schema", (char*const*)&a->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * SOAP_FMAC4 soap_in__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *tag, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, sizeof(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "xsd:schema", (char**)&a->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, sizeof(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *p;
	size_t k = sizeof(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag ? tag : "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * SOAP_FMAC4 soap_get__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema = NULL;
	this->_ns1__getRegionDatasetResponse_getRegionDatasetResult::__any = NULL;
}

void _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *tag, int id, const _ns1__getRegionDatasetResponse_getRegionDatasetResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult), type))
		return soap->error;
	if (!a->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema)
	{	if (soap_element_empty(soap, "xsd:schema"))
			return soap->error;
	}
	else
	if (soap_outliteral(soap, "xsd:schema", (char*const*)&a->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__getRegionDatasetResponse_getRegionDatasetResult::__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult * SOAP_FMAC4 soap_in__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *tag, _ns1__getRegionDatasetResponse_getRegionDatasetResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionDatasetResponse_getRegionDatasetResult *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult, sizeof(_ns1__getRegionDatasetResponse_getRegionDatasetResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionDatasetResponse_getRegionDatasetResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "xsd:schema", (char**)&a->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__getRegionDatasetResponse_getRegionDatasetResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__getRegionDatasetResponse_getRegionDatasetResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult, sizeof(_ns1__getRegionDatasetResponse_getRegionDatasetResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionDatasetResponse_getRegionDatasetResult * SOAP_FMAC2 soap_instantiate__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionDatasetResponse_getRegionDatasetResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionDatasetResponse_getRegionDatasetResult *p;
	size_t k = sizeof(_ns1__getRegionDatasetResponse_getRegionDatasetResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionDatasetResponse_getRegionDatasetResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag ? tag : "ns1:getRegionDatasetResponse-getRegionDatasetResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult * SOAP_FMAC4 soap_get__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	wchar_t *t;
		s = (std::wstring*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__wstring, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::wstring *p;
	size_t k = sizeof(std::wstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::wstring);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::wstring, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::wstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	if (soap_out_std__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DataSet::xsd__schema = NULL;
	this->_ns1__DataSet::__any = NULL;
	/* transient soap skipped */
}

void _ns1__DataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__DataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataSet(struct soap *soap, const char *tag, int id, const _ns1__DataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DataSet), type))
		return soap->error;
	if (!a->_ns1__DataSet::xsd__schema)
	{	if (soap_element_empty(soap, "xsd:schema"))
			return soap->error;
	}
	else
	if (soap_outliteral(soap, "xsd:schema", (char*const*)&a->_ns1__DataSet::xsd__schema, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_ns1__DataSet::__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DataSet(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_in__ns1__DataSet(struct soap *soap, const char *tag, _ns1__DataSet *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DataSet *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DataSet, sizeof(_ns1__DataSet), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DataSet)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DataSet *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "xsd:schema", (char**)&a->_ns1__DataSet::xsd__schema))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_ns1__DataSet::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns1__DataSet::xsd__schema))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DataSet, SOAP_TYPE__ns1__DataSet, sizeof(_ns1__DataSet), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DataSet * SOAP_FMAC2 soap_instantiate__ns1__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DataSet(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DataSet *p;
	size_t k = sizeof(_ns1__DataSet);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DataSet, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DataSet);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DataSet, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DataSet location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DataSet(soap, tag ? tag : "ns1:DataSet", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DataSet(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_get__ns1__DataSet(struct soap *soap, _ns1__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getWeatherResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getWeatherResponse::getWeatherResult = NULL;
	/* transient soap skipped */
}

void _ns1__getWeatherResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getWeatherResponse::getWeatherResult);
#endif
}

int _ns1__getWeatherResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getWeatherResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherResponse(struct soap *soap, const char *tag, int id, const _ns1__getWeatherResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getWeatherResponse), type))
		return soap->error;
	if (a->getWeatherResult)
		soap_element_result(soap, "ns1:getWeatherResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getWeatherResult", -1, &a->_ns1__getWeatherResponse::getWeatherResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getWeatherResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getWeatherResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getWeatherResponse * SOAP_FMAC4 soap_in__ns1__getWeatherResponse(struct soap *soap, const char *tag, _ns1__getWeatherResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getWeatherResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getWeatherResponse, sizeof(_ns1__getWeatherResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getWeatherResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getWeatherResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getWeatherResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getWeatherResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getWeatherResult", &a->_ns1__getWeatherResponse::getWeatherResult, "ns1:ArrayOfString"))
				{	soap_flag_getWeatherResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getWeatherResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getWeatherResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getWeatherResponse, SOAP_TYPE__ns1__getWeatherResponse, sizeof(_ns1__getWeatherResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getWeatherResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getWeatherResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getWeatherResponse *p;
	size_t k = sizeof(_ns1__getWeatherResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getWeatherResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getWeatherResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getWeatherResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getWeatherResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getWeatherResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getWeatherResponse(soap, tag ? tag : "ns1:getWeatherResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getWeatherResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getWeatherResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getWeatherResponse * SOAP_FMAC4 soap_get__ns1__getWeatherResponse(struct soap *soap, _ns1__getWeatherResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getWeatherResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getWeather::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getWeather::theCityCode = NULL;
	this->_ns1__getWeather::theUserID = NULL;
	/* transient soap skipped */
}

void _ns1__getWeather::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__getWeather::theCityCode);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__getWeather::theUserID);
#endif
}

int _ns1__getWeather::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getWeather(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeather(struct soap *soap, const char *tag, int id, const _ns1__getWeather *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getWeather), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:theCityCode", -1, &a->_ns1__getWeather::theCityCode, ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:theUserID", -1, &a->_ns1__getWeather::theUserID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getWeather::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getWeather(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getWeather * SOAP_FMAC4 soap_in__ns1__getWeather(struct soap *soap, const char *tag, _ns1__getWeather *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getWeather *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getWeather, sizeof(_ns1__getWeather), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getWeather)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getWeather *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_theCityCode1 = 1;
	size_t soap_flag_theUserID1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theCityCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__wstring(soap, "ns1:theCityCode", &a->_ns1__getWeather::theCityCode, "xsd:string"))
				{	soap_flag_theCityCode1--;
					continue;
				}
			}
			if (soap_flag_theUserID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__wstring(soap, "ns1:theUserID", &a->_ns1__getWeather::theUserID, "xsd:string"))
				{	soap_flag_theUserID1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getWeather *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getWeather, SOAP_TYPE__ns1__getWeather, sizeof(_ns1__getWeather), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getWeather * SOAP_FMAC2 soap_instantiate__ns1__getWeather(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getWeather(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getWeather *p;
	size_t k = sizeof(_ns1__getWeather);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getWeather, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getWeather);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getWeather, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getWeather location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getWeather::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getWeather(soap, tag ? tag : "ns1:getWeather", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getWeather::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getWeather(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getWeather * SOAP_FMAC4 soap_get__ns1__getWeather(struct soap *soap, _ns1__getWeather *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getWeather(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSupportCityStringResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportCityStringResponse::getSupportCityStringResult = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportCityStringResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getSupportCityStringResponse::getSupportCityStringResult);
#endif
}

int _ns1__getSupportCityStringResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCityStringResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityStringResponse(struct soap *soap, const char *tag, int id, const _ns1__getSupportCityStringResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCityStringResponse), type))
		return soap->error;
	if (a->getSupportCityStringResult)
		soap_element_result(soap, "ns1:getSupportCityStringResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getSupportCityStringResult", -1, &a->_ns1__getSupportCityStringResponse::getSupportCityStringResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCityStringResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCityStringResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCityStringResponse * SOAP_FMAC4 soap_in__ns1__getSupportCityStringResponse(struct soap *soap, const char *tag, _ns1__getSupportCityStringResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCityStringResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCityStringResponse, sizeof(_ns1__getSupportCityStringResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSupportCityStringResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSupportCityStringResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getSupportCityStringResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportCityStringResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getSupportCityStringResult", &a->_ns1__getSupportCityStringResponse::getSupportCityStringResult, "ns1:ArrayOfString"))
				{	soap_flag_getSupportCityStringResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getSupportCityStringResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportCityStringResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCityStringResponse, SOAP_TYPE__ns1__getSupportCityStringResponse, sizeof(_ns1__getSupportCityStringResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSupportCityStringResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityStringResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCityStringResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSupportCityStringResponse *p;
	size_t k = sizeof(_ns1__getSupportCityStringResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSupportCityStringResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSupportCityStringResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSupportCityStringResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSupportCityStringResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSupportCityStringResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSupportCityStringResponse(soap, tag ? tag : "ns1:getSupportCityStringResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCityStringResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCityStringResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCityStringResponse * SOAP_FMAC4 soap_get__ns1__getSupportCityStringResponse(struct soap *soap, _ns1__getSupportCityStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCityStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSupportCityString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportCityString::theRegionCode = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportCityString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__getSupportCityString::theRegionCode);
#endif
}

int _ns1__getSupportCityString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCityString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityString(struct soap *soap, const char *tag, int id, const _ns1__getSupportCityString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCityString), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:theRegionCode", -1, &a->_ns1__getSupportCityString::theRegionCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCityString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCityString(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCityString * SOAP_FMAC4 soap_in__ns1__getSupportCityString(struct soap *soap, const char *tag, _ns1__getSupportCityString *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCityString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCityString, sizeof(_ns1__getSupportCityString), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSupportCityString)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSupportCityString *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_theRegionCode1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theRegionCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__wstring(soap, "ns1:theRegionCode", &a->_ns1__getSupportCityString::theRegionCode, "xsd:string"))
				{	soap_flag_theRegionCode1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportCityString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCityString, SOAP_TYPE__ns1__getSupportCityString, sizeof(_ns1__getSupportCityString), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSupportCityString * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCityString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSupportCityString *p;
	size_t k = sizeof(_ns1__getSupportCityString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSupportCityString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSupportCityString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSupportCityString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSupportCityString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSupportCityString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSupportCityString(soap, tag ? tag : "ns1:getSupportCityString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCityString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCityString(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCityString * SOAP_FMAC4 soap_get__ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCityString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSupportCityDatasetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportCityDatasetResponse::getSupportCityDatasetResult = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportCityDatasetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, &this->_ns1__getSupportCityDatasetResponse::getSupportCityDatasetResult);
#endif
}

int _ns1__getSupportCityDatasetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCityDatasetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityDatasetResponse(struct soap *soap, const char *tag, int id, const _ns1__getSupportCityDatasetResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCityDatasetResponse), type))
		return soap->error;
	if (a->getSupportCityDatasetResult)
		soap_element_result(soap, "ns1:getSupportCityDatasetResult");
	if (soap_out_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, "ns1:getSupportCityDatasetResult", -1, &a->_ns1__getSupportCityDatasetResponse::getSupportCityDatasetResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCityDatasetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCityDatasetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCityDatasetResponse * SOAP_FMAC4 soap_in__ns1__getSupportCityDatasetResponse(struct soap *soap, const char *tag, _ns1__getSupportCityDatasetResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCityDatasetResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCityDatasetResponse, sizeof(_ns1__getSupportCityDatasetResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSupportCityDatasetResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSupportCityDatasetResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getSupportCityDatasetResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportCityDatasetResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, "ns1:getSupportCityDatasetResult", &a->_ns1__getSupportCityDatasetResponse::getSupportCityDatasetResult, ""))
				{	soap_flag_getSupportCityDatasetResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getSupportCityDatasetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportCityDatasetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCityDatasetResponse, SOAP_TYPE__ns1__getSupportCityDatasetResponse, sizeof(_ns1__getSupportCityDatasetResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSupportCityDatasetResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityDatasetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCityDatasetResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSupportCityDatasetResponse *p;
	size_t k = sizeof(_ns1__getSupportCityDatasetResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSupportCityDatasetResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSupportCityDatasetResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSupportCityDatasetResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSupportCityDatasetResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSupportCityDatasetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSupportCityDatasetResponse(soap, tag ? tag : "ns1:getSupportCityDatasetResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCityDatasetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCityDatasetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCityDatasetResponse * SOAP_FMAC4 soap_get__ns1__getSupportCityDatasetResponse(struct soap *soap, _ns1__getSupportCityDatasetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCityDatasetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getSupportCityDataset::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getSupportCityDataset::theRegionCode = NULL;
	/* transient soap skipped */
}

void _ns1__getSupportCityDataset::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__getSupportCityDataset::theRegionCode);
#endif
}

int _ns1__getSupportCityDataset::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getSupportCityDataset(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityDataset(struct soap *soap, const char *tag, int id, const _ns1__getSupportCityDataset *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getSupportCityDataset), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:theRegionCode", -1, &a->_ns1__getSupportCityDataset::theRegionCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getSupportCityDataset::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getSupportCityDataset(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getSupportCityDataset * SOAP_FMAC4 soap_in__ns1__getSupportCityDataset(struct soap *soap, const char *tag, _ns1__getSupportCityDataset *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getSupportCityDataset *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getSupportCityDataset, sizeof(_ns1__getSupportCityDataset), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getSupportCityDataset)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getSupportCityDataset *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_theRegionCode1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theRegionCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__wstring(soap, "ns1:theRegionCode", &a->_ns1__getSupportCityDataset::theRegionCode, "xsd:string"))
				{	soap_flag_theRegionCode1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getSupportCityDataset *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getSupportCityDataset, SOAP_TYPE__ns1__getSupportCityDataset, sizeof(_ns1__getSupportCityDataset), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getSupportCityDataset * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityDataset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getSupportCityDataset(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getSupportCityDataset *p;
	size_t k = sizeof(_ns1__getSupportCityDataset);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getSupportCityDataset, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getSupportCityDataset);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getSupportCityDataset, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getSupportCityDataset location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getSupportCityDataset::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getSupportCityDataset(soap, tag ? tag : "ns1:getSupportCityDataset", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getSupportCityDataset::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getSupportCityDataset(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getSupportCityDataset * SOAP_FMAC4 soap_get__ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getSupportCityDataset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionCountryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getRegionCountryResponse::getRegionCountryResult = NULL;
	/* transient soap skipped */
}

void _ns1__getRegionCountryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getRegionCountryResponse::getRegionCountryResult);
#endif
}

int _ns1__getRegionCountryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionCountryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionCountryResponse(struct soap *soap, const char *tag, int id, const _ns1__getRegionCountryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionCountryResponse), type))
		return soap->error;
	if (a->getRegionCountryResult)
		soap_element_result(soap, "ns1:getRegionCountryResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getRegionCountryResult", -1, &a->_ns1__getRegionCountryResponse::getRegionCountryResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionCountryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionCountryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionCountryResponse * SOAP_FMAC4 soap_in__ns1__getRegionCountryResponse(struct soap *soap, const char *tag, _ns1__getRegionCountryResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionCountryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionCountryResponse, sizeof(_ns1__getRegionCountryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionCountryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionCountryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getRegionCountryResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getRegionCountryResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getRegionCountryResult", &a->_ns1__getRegionCountryResponse::getRegionCountryResult, "ns1:ArrayOfString"))
				{	soap_flag_getRegionCountryResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getRegionCountryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getRegionCountryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionCountryResponse, SOAP_TYPE__ns1__getRegionCountryResponse, sizeof(_ns1__getRegionCountryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionCountryResponse * SOAP_FMAC2 soap_instantiate__ns1__getRegionCountryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionCountryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionCountryResponse *p;
	size_t k = sizeof(_ns1__getRegionCountryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionCountryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionCountryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionCountryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionCountryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionCountryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionCountryResponse(soap, tag ? tag : "ns1:getRegionCountryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionCountryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionCountryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionCountryResponse * SOAP_FMAC4 soap_get__ns1__getRegionCountryResponse(struct soap *soap, _ns1__getRegionCountryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionCountryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionCountry::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__getRegionCountry::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__getRegionCountry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionCountry(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionCountry(struct soap *soap, const char *tag, int id, const _ns1__getRegionCountry *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionCountry), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionCountry::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionCountry(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionCountry * SOAP_FMAC4 soap_in__ns1__getRegionCountry(struct soap *soap, const char *tag, _ns1__getRegionCountry *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionCountry *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionCountry, sizeof(_ns1__getRegionCountry), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionCountry)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionCountry *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getRegionCountry *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionCountry, SOAP_TYPE__ns1__getRegionCountry, sizeof(_ns1__getRegionCountry), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionCountry * SOAP_FMAC2 soap_instantiate__ns1__getRegionCountry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionCountry(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionCountry *p;
	size_t k = sizeof(_ns1__getRegionCountry);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionCountry, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionCountry);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionCountry, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionCountry location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionCountry::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionCountry(soap, tag ? tag : "ns1:getRegionCountry", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionCountry::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionCountry(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionCountry * SOAP_FMAC4 soap_get__ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionCountry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionProvinceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getRegionProvinceResponse::getRegionProvinceResult = NULL;
	/* transient soap skipped */
}

void _ns1__getRegionProvinceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__getRegionProvinceResponse::getRegionProvinceResult);
#endif
}

int _ns1__getRegionProvinceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionProvinceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionProvinceResponse(struct soap *soap, const char *tag, int id, const _ns1__getRegionProvinceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionProvinceResponse), type))
		return soap->error;
	if (a->getRegionProvinceResult)
		soap_element_result(soap, "ns1:getRegionProvinceResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:getRegionProvinceResult", -1, &a->_ns1__getRegionProvinceResponse::getRegionProvinceResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionProvinceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionProvinceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionProvinceResponse * SOAP_FMAC4 soap_in__ns1__getRegionProvinceResponse(struct soap *soap, const char *tag, _ns1__getRegionProvinceResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionProvinceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionProvinceResponse, sizeof(_ns1__getRegionProvinceResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionProvinceResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionProvinceResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getRegionProvinceResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getRegionProvinceResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:getRegionProvinceResult", &a->_ns1__getRegionProvinceResponse::getRegionProvinceResult, "ns1:ArrayOfString"))
				{	soap_flag_getRegionProvinceResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getRegionProvinceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getRegionProvinceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionProvinceResponse, SOAP_TYPE__ns1__getRegionProvinceResponse, sizeof(_ns1__getRegionProvinceResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionProvinceResponse * SOAP_FMAC2 soap_instantiate__ns1__getRegionProvinceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionProvinceResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionProvinceResponse *p;
	size_t k = sizeof(_ns1__getRegionProvinceResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionProvinceResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionProvinceResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionProvinceResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionProvinceResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionProvinceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionProvinceResponse(soap, tag ? tag : "ns1:getRegionProvinceResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionProvinceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionProvinceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionProvinceResponse * SOAP_FMAC4 soap_get__ns1__getRegionProvinceResponse(struct soap *soap, _ns1__getRegionProvinceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionProvinceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionProvince::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__getRegionProvince::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__getRegionProvince::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionProvince(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionProvince(struct soap *soap, const char *tag, int id, const _ns1__getRegionProvince *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionProvince), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionProvince::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionProvince(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionProvince * SOAP_FMAC4 soap_in__ns1__getRegionProvince(struct soap *soap, const char *tag, _ns1__getRegionProvince *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionProvince *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionProvince, sizeof(_ns1__getRegionProvince), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionProvince)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionProvince *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getRegionProvince *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionProvince, SOAP_TYPE__ns1__getRegionProvince, sizeof(_ns1__getRegionProvince), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionProvince * SOAP_FMAC2 soap_instantiate__ns1__getRegionProvince(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionProvince(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionProvince *p;
	size_t k = sizeof(_ns1__getRegionProvince);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionProvince, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionProvince);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionProvince, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionProvince location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionProvince::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionProvince(soap, tag ? tag : "ns1:getRegionProvince", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionProvince::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionProvince(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionProvince * SOAP_FMAC4 soap_get__ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionDatasetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getRegionDatasetResponse::getRegionDatasetResult = NULL;
	/* transient soap skipped */
}

void _ns1__getRegionDatasetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, &this->_ns1__getRegionDatasetResponse::getRegionDatasetResult);
#endif
}

int _ns1__getRegionDatasetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionDatasetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionDatasetResponse(struct soap *soap, const char *tag, int id, const _ns1__getRegionDatasetResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionDatasetResponse), type))
		return soap->error;
	if (a->getRegionDatasetResult)
		soap_element_result(soap, "ns1:getRegionDatasetResult");
	if (soap_out_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, "ns1:getRegionDatasetResult", -1, &a->_ns1__getRegionDatasetResponse::getRegionDatasetResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionDatasetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionDatasetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionDatasetResponse * SOAP_FMAC4 soap_in__ns1__getRegionDatasetResponse(struct soap *soap, const char *tag, _ns1__getRegionDatasetResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionDatasetResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionDatasetResponse, sizeof(_ns1__getRegionDatasetResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionDatasetResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionDatasetResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getRegionDatasetResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getRegionDatasetResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, "ns1:getRegionDatasetResult", &a->_ns1__getRegionDatasetResponse::getRegionDatasetResult, ""))
				{	soap_flag_getRegionDatasetResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:getRegionDatasetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getRegionDatasetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionDatasetResponse, SOAP_TYPE__ns1__getRegionDatasetResponse, sizeof(_ns1__getRegionDatasetResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionDatasetResponse * SOAP_FMAC2 soap_instantiate__ns1__getRegionDatasetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionDatasetResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionDatasetResponse *p;
	size_t k = sizeof(_ns1__getRegionDatasetResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionDatasetResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionDatasetResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionDatasetResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionDatasetResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionDatasetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionDatasetResponse(soap, tag ? tag : "ns1:getRegionDatasetResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionDatasetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionDatasetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionDatasetResponse * SOAP_FMAC4 soap_get__ns1__getRegionDatasetResponse(struct soap *soap, _ns1__getRegionDatasetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionDatasetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__getRegionDataset::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__getRegionDataset::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _ns1__getRegionDataset::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getRegionDataset(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionDataset(struct soap *soap, const char *tag, int id, const _ns1__getRegionDataset *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getRegionDataset), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__getRegionDataset::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getRegionDataset(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getRegionDataset * SOAP_FMAC4 soap_in__ns1__getRegionDataset(struct soap *soap, const char *tag, _ns1__getRegionDataset *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getRegionDataset *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getRegionDataset, sizeof(_ns1__getRegionDataset), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__getRegionDataset)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__getRegionDataset *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getRegionDataset *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getRegionDataset, SOAP_TYPE__ns1__getRegionDataset, sizeof(_ns1__getRegionDataset), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__getRegionDataset * SOAP_FMAC2 soap_instantiate__ns1__getRegionDataset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getRegionDataset(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__getRegionDataset *p;
	size_t k = sizeof(_ns1__getRegionDataset);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__getRegionDataset, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__getRegionDataset);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__getRegionDataset, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__getRegionDataset location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__getRegionDataset::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__getRegionDataset(soap, tag ? tag : "ns1:getRegionDataset", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getRegionDataset::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getRegionDataset(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getRegionDataset * SOAP_FMAC4 soap_get__ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getRegionDataset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__wstring(soap, &this->ns1__ArrayOfString::string);
	/* transient soap skipped */
}

void ns1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__wstring(soap, &this->ns1__ArrayOfString::string);
#endif
}

int ns1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap *soap, const char *tag, int id, const ns1__ArrayOfString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfString), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__wstring(soap, "ns1:string", -1, &a->ns1__ArrayOfString::string, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__ArrayOfString)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__ArrayOfString *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__wstring(soap, "ns1:string", &a->ns1__ArrayOfString::string, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfString, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__ArrayOfString *p;
	size_t k = sizeof(ns1__ArrayOfString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__ArrayOfString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__ArrayOfString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__ArrayOfString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__ArrayOfString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__ArrayOfString(soap, tag ? tag : "ns1:ArrayOfString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeather_(struct soap *soap, struct __ns1__getWeather_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getWeather = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeather_(struct soap *soap, const struct __ns1__getWeather_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getWeather(soap, &a->ns1__getWeather);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeather_(struct soap *soap, const char *tag, int id, const struct __ns1__getWeather_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getWeather(soap, "ns1:getWeather", -1, &a->ns1__getWeather, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeather_ * SOAP_FMAC4 soap_in___ns1__getWeather_(struct soap *soap, const char *tag, struct __ns1__getWeather_ *a, const char *type)
{
	size_t soap_flag_ns1__getWeather = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getWeather_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getWeather_, sizeof(struct __ns1__getWeather_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getWeather_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getWeather && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getWeather(soap, "ns1:getWeather", &a->ns1__getWeather, ""))
				{	soap_flag_ns1__getWeather--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getWeather_ * SOAP_FMAC2 soap_instantiate___ns1__getWeather_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getWeather_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getWeather_ *p;
	size_t k = sizeof(struct __ns1__getWeather_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getWeather_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getWeather_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getWeather_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getWeather_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeather_(struct soap *soap, const struct __ns1__getWeather_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getWeather_(soap, tag ? tag : "-ns1:getWeather", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeather_ * SOAP_FMAC4 soap_get___ns1__getWeather_(struct soap *soap, struct __ns1__getWeather_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getWeather_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityString_(struct soap *soap, struct __ns1__getSupportCityString_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportCityString = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityString_(struct soap *soap, const struct __ns1__getSupportCityString_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCityString(soap, &a->ns1__getSupportCityString);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityString_(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportCityString_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportCityString(soap, "ns1:getSupportCityString", -1, &a->ns1__getSupportCityString, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityString_ * SOAP_FMAC4 soap_in___ns1__getSupportCityString_(struct soap *soap, const char *tag, struct __ns1__getSupportCityString_ *a, const char *type)
{
	size_t soap_flag_ns1__getSupportCityString = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportCityString_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportCityString_, sizeof(struct __ns1__getSupportCityString_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportCityString_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportCityString && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSupportCityString(soap, "ns1:getSupportCityString", &a->ns1__getSupportCityString, ""))
				{	soap_flag_ns1__getSupportCityString--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSupportCityString_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityString_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportCityString_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSupportCityString_ *p;
	size_t k = sizeof(struct __ns1__getSupportCityString_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSupportCityString_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSupportCityString_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSupportCityString_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSupportCityString_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityString_(struct soap *soap, const struct __ns1__getSupportCityString_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSupportCityString_(soap, tag ? tag : "-ns1:getSupportCityString", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityString_ * SOAP_FMAC4 soap_get___ns1__getSupportCityString_(struct soap *soap, struct __ns1__getSupportCityString_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportCityString_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityDataset_(struct soap *soap, struct __ns1__getSupportCityDataset_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportCityDataset = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityDataset_(struct soap *soap, const struct __ns1__getSupportCityDataset_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCityDataset(soap, &a->ns1__getSupportCityDataset);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityDataset_(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportCityDataset_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportCityDataset(soap, "ns1:getSupportCityDataset", -1, &a->ns1__getSupportCityDataset, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityDataset_ * SOAP_FMAC4 soap_in___ns1__getSupportCityDataset_(struct soap *soap, const char *tag, struct __ns1__getSupportCityDataset_ *a, const char *type)
{
	size_t soap_flag_ns1__getSupportCityDataset = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportCityDataset_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportCityDataset_, sizeof(struct __ns1__getSupportCityDataset_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportCityDataset_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportCityDataset && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSupportCityDataset(soap, "ns1:getSupportCityDataset", &a->ns1__getSupportCityDataset, ""))
				{	soap_flag_ns1__getSupportCityDataset--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSupportCityDataset_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityDataset_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportCityDataset_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSupportCityDataset_ *p;
	size_t k = sizeof(struct __ns1__getSupportCityDataset_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSupportCityDataset_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSupportCityDataset_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSupportCityDataset_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSupportCityDataset_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityDataset_(struct soap *soap, const struct __ns1__getSupportCityDataset_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSupportCityDataset_(soap, tag ? tag : "-ns1:getSupportCityDataset", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityDataset_ * SOAP_FMAC4 soap_get___ns1__getSupportCityDataset_(struct soap *soap, struct __ns1__getSupportCityDataset_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportCityDataset_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionCountry_(struct soap *soap, struct __ns1__getRegionCountry_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRegionCountry = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionCountry_(struct soap *soap, const struct __ns1__getRegionCountry_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionCountry(soap, &a->ns1__getRegionCountry);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionCountry_(struct soap *soap, const char *tag, int id, const struct __ns1__getRegionCountry_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getRegionCountry(soap, "ns1:getRegionCountry", -1, &a->ns1__getRegionCountry, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionCountry_ * SOAP_FMAC4 soap_in___ns1__getRegionCountry_(struct soap *soap, const char *tag, struct __ns1__getRegionCountry_ *a, const char *type)
{
	size_t soap_flag_ns1__getRegionCountry = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRegionCountry_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRegionCountry_, sizeof(struct __ns1__getRegionCountry_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRegionCountry_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRegionCountry && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionCountry(soap, "ns1:getRegionCountry", &a->ns1__getRegionCountry, ""))
				{	soap_flag_ns1__getRegionCountry--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRegionCountry_ * SOAP_FMAC2 soap_instantiate___ns1__getRegionCountry_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRegionCountry_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRegionCountry_ *p;
	size_t k = sizeof(struct __ns1__getRegionCountry_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRegionCountry_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRegionCountry_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRegionCountry_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRegionCountry_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionCountry_(struct soap *soap, const struct __ns1__getRegionCountry_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRegionCountry_(soap, tag ? tag : "-ns1:getRegionCountry", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionCountry_ * SOAP_FMAC4 soap_get___ns1__getRegionCountry_(struct soap *soap, struct __ns1__getRegionCountry_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRegionCountry_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionProvince_(struct soap *soap, struct __ns1__getRegionProvince_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRegionProvince = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionProvince_(struct soap *soap, const struct __ns1__getRegionProvince_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionProvince(soap, &a->ns1__getRegionProvince);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionProvince_(struct soap *soap, const char *tag, int id, const struct __ns1__getRegionProvince_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getRegionProvince(soap, "ns1:getRegionProvince", -1, &a->ns1__getRegionProvince, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionProvince_ * SOAP_FMAC4 soap_in___ns1__getRegionProvince_(struct soap *soap, const char *tag, struct __ns1__getRegionProvince_ *a, const char *type)
{
	size_t soap_flag_ns1__getRegionProvince = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRegionProvince_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRegionProvince_, sizeof(struct __ns1__getRegionProvince_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRegionProvince_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRegionProvince && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionProvince(soap, "ns1:getRegionProvince", &a->ns1__getRegionProvince, ""))
				{	soap_flag_ns1__getRegionProvince--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRegionProvince_ * SOAP_FMAC2 soap_instantiate___ns1__getRegionProvince_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRegionProvince_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRegionProvince_ *p;
	size_t k = sizeof(struct __ns1__getRegionProvince_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRegionProvince_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRegionProvince_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRegionProvince_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRegionProvince_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionProvince_(struct soap *soap, const struct __ns1__getRegionProvince_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRegionProvince_(soap, tag ? tag : "-ns1:getRegionProvince", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionProvince_ * SOAP_FMAC4 soap_get___ns1__getRegionProvince_(struct soap *soap, struct __ns1__getRegionProvince_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRegionProvince_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionDataset_(struct soap *soap, struct __ns1__getRegionDataset_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRegionDataset = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionDataset_(struct soap *soap, const struct __ns1__getRegionDataset_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionDataset(soap, &a->ns1__getRegionDataset);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionDataset_(struct soap *soap, const char *tag, int id, const struct __ns1__getRegionDataset_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getRegionDataset(soap, "ns1:getRegionDataset", -1, &a->ns1__getRegionDataset, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionDataset_ * SOAP_FMAC4 soap_in___ns1__getRegionDataset_(struct soap *soap, const char *tag, struct __ns1__getRegionDataset_ *a, const char *type)
{
	size_t soap_flag_ns1__getRegionDataset = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRegionDataset_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRegionDataset_, sizeof(struct __ns1__getRegionDataset_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRegionDataset_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRegionDataset && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionDataset(soap, "ns1:getRegionDataset", &a->ns1__getRegionDataset, ""))
				{	soap_flag_ns1__getRegionDataset--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRegionDataset_ * SOAP_FMAC2 soap_instantiate___ns1__getRegionDataset_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRegionDataset_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRegionDataset_ *p;
	size_t k = sizeof(struct __ns1__getRegionDataset_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRegionDataset_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRegionDataset_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRegionDataset_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRegionDataset_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionDataset_(struct soap *soap, const struct __ns1__getRegionDataset_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRegionDataset_(soap, tag ? tag : "-ns1:getRegionDataset", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionDataset_ * SOAP_FMAC4 soap_get___ns1__getRegionDataset_(struct soap *soap, struct __ns1__getRegionDataset_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRegionDataset_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeather(struct soap *soap, struct __ns1__getWeather *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getWeather = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeather(struct soap *soap, const struct __ns1__getWeather *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getWeather(soap, &a->ns1__getWeather);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeather(struct soap *soap, const char *tag, int id, const struct __ns1__getWeather *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getWeather(soap, "ns1:getWeather", -1, &a->ns1__getWeather, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeather * SOAP_FMAC4 soap_in___ns1__getWeather(struct soap *soap, const char *tag, struct __ns1__getWeather *a, const char *type)
{
	size_t soap_flag_ns1__getWeather = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getWeather *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getWeather, sizeof(struct __ns1__getWeather), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getWeather(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getWeather && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getWeather(soap, "ns1:getWeather", &a->ns1__getWeather, ""))
				{	soap_flag_ns1__getWeather--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getWeather * SOAP_FMAC2 soap_instantiate___ns1__getWeather(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getWeather(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getWeather *p;
	size_t k = sizeof(struct __ns1__getWeather);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getWeather, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getWeather);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getWeather, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getWeather location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeather(struct soap *soap, const struct __ns1__getWeather *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getWeather(soap, tag ? tag : "-ns1:getWeather", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getWeather * SOAP_FMAC4 soap_get___ns1__getWeather(struct soap *soap, struct __ns1__getWeather *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getWeather(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityString(struct soap *soap, struct __ns1__getSupportCityString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportCityString = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityString(struct soap *soap, const struct __ns1__getSupportCityString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCityString(soap, &a->ns1__getSupportCityString);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityString(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportCityString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportCityString(soap, "ns1:getSupportCityString", -1, &a->ns1__getSupportCityString, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityString * SOAP_FMAC4 soap_in___ns1__getSupportCityString(struct soap *soap, const char *tag, struct __ns1__getSupportCityString *a, const char *type)
{
	size_t soap_flag_ns1__getSupportCityString = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportCityString *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportCityString, sizeof(struct __ns1__getSupportCityString), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportCityString(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportCityString && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSupportCityString(soap, "ns1:getSupportCityString", &a->ns1__getSupportCityString, ""))
				{	soap_flag_ns1__getSupportCityString--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSupportCityString * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportCityString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSupportCityString *p;
	size_t k = sizeof(struct __ns1__getSupportCityString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSupportCityString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSupportCityString);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSupportCityString, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSupportCityString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityString(struct soap *soap, const struct __ns1__getSupportCityString *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSupportCityString(soap, tag ? tag : "-ns1:getSupportCityString", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityString * SOAP_FMAC4 soap_get___ns1__getSupportCityString(struct soap *soap, struct __ns1__getSupportCityString *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportCityString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityDataset(struct soap *soap, struct __ns1__getSupportCityDataset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getSupportCityDataset = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityDataset(struct soap *soap, const struct __ns1__getSupportCityDataset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getSupportCityDataset(soap, &a->ns1__getSupportCityDataset);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityDataset(struct soap *soap, const char *tag, int id, const struct __ns1__getSupportCityDataset *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getSupportCityDataset(soap, "ns1:getSupportCityDataset", -1, &a->ns1__getSupportCityDataset, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityDataset * SOAP_FMAC4 soap_in___ns1__getSupportCityDataset(struct soap *soap, const char *tag, struct __ns1__getSupportCityDataset *a, const char *type)
{
	size_t soap_flag_ns1__getSupportCityDataset = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getSupportCityDataset *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getSupportCityDataset, sizeof(struct __ns1__getSupportCityDataset), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getSupportCityDataset(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getSupportCityDataset && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getSupportCityDataset(soap, "ns1:getSupportCityDataset", &a->ns1__getSupportCityDataset, ""))
				{	soap_flag_ns1__getSupportCityDataset--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getSupportCityDataset * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityDataset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getSupportCityDataset(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getSupportCityDataset *p;
	size_t k = sizeof(struct __ns1__getSupportCityDataset);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getSupportCityDataset, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getSupportCityDataset);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getSupportCityDataset, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getSupportCityDataset location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityDataset(struct soap *soap, const struct __ns1__getSupportCityDataset *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getSupportCityDataset(soap, tag ? tag : "-ns1:getSupportCityDataset", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getSupportCityDataset * SOAP_FMAC4 soap_get___ns1__getSupportCityDataset(struct soap *soap, struct __ns1__getSupportCityDataset *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getSupportCityDataset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionCountry(struct soap *soap, struct __ns1__getRegionCountry *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRegionCountry = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionCountry(struct soap *soap, const struct __ns1__getRegionCountry *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionCountry(soap, &a->ns1__getRegionCountry);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionCountry(struct soap *soap, const char *tag, int id, const struct __ns1__getRegionCountry *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getRegionCountry(soap, "ns1:getRegionCountry", -1, &a->ns1__getRegionCountry, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionCountry * SOAP_FMAC4 soap_in___ns1__getRegionCountry(struct soap *soap, const char *tag, struct __ns1__getRegionCountry *a, const char *type)
{
	size_t soap_flag_ns1__getRegionCountry = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRegionCountry *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRegionCountry, sizeof(struct __ns1__getRegionCountry), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRegionCountry(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRegionCountry && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionCountry(soap, "ns1:getRegionCountry", &a->ns1__getRegionCountry, ""))
				{	soap_flag_ns1__getRegionCountry--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRegionCountry * SOAP_FMAC2 soap_instantiate___ns1__getRegionCountry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRegionCountry(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRegionCountry *p;
	size_t k = sizeof(struct __ns1__getRegionCountry);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRegionCountry, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRegionCountry);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRegionCountry, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRegionCountry location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionCountry(struct soap *soap, const struct __ns1__getRegionCountry *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRegionCountry(soap, tag ? tag : "-ns1:getRegionCountry", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionCountry * SOAP_FMAC4 soap_get___ns1__getRegionCountry(struct soap *soap, struct __ns1__getRegionCountry *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRegionCountry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionProvince(struct soap *soap, struct __ns1__getRegionProvince *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRegionProvince = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionProvince(struct soap *soap, const struct __ns1__getRegionProvince *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionProvince(soap, &a->ns1__getRegionProvince);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionProvince(struct soap *soap, const char *tag, int id, const struct __ns1__getRegionProvince *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getRegionProvince(soap, "ns1:getRegionProvince", -1, &a->ns1__getRegionProvince, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionProvince * SOAP_FMAC4 soap_in___ns1__getRegionProvince(struct soap *soap, const char *tag, struct __ns1__getRegionProvince *a, const char *type)
{
	size_t soap_flag_ns1__getRegionProvince = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRegionProvince *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRegionProvince, sizeof(struct __ns1__getRegionProvince), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRegionProvince(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRegionProvince && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionProvince(soap, "ns1:getRegionProvince", &a->ns1__getRegionProvince, ""))
				{	soap_flag_ns1__getRegionProvince--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRegionProvince * SOAP_FMAC2 soap_instantiate___ns1__getRegionProvince(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRegionProvince(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRegionProvince *p;
	size_t k = sizeof(struct __ns1__getRegionProvince);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRegionProvince, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRegionProvince);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRegionProvince, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRegionProvince location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionProvince(struct soap *soap, const struct __ns1__getRegionProvince *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRegionProvince(soap, tag ? tag : "-ns1:getRegionProvince", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionProvince * SOAP_FMAC4 soap_get___ns1__getRegionProvince(struct soap *soap, struct __ns1__getRegionProvince *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRegionProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionDataset(struct soap *soap, struct __ns1__getRegionDataset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getRegionDataset = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionDataset(struct soap *soap, const struct __ns1__getRegionDataset *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__getRegionDataset(soap, &a->ns1__getRegionDataset);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionDataset(struct soap *soap, const char *tag, int id, const struct __ns1__getRegionDataset *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__getRegionDataset(soap, "ns1:getRegionDataset", -1, &a->ns1__getRegionDataset, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionDataset * SOAP_FMAC4 soap_in___ns1__getRegionDataset(struct soap *soap, const char *tag, struct __ns1__getRegionDataset *a, const char *type)
{
	size_t soap_flag_ns1__getRegionDataset = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__getRegionDataset *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getRegionDataset, sizeof(struct __ns1__getRegionDataset), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getRegionDataset(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getRegionDataset && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__getRegionDataset(soap, "ns1:getRegionDataset", &a->ns1__getRegionDataset, ""))
				{	soap_flag_ns1__getRegionDataset--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__getRegionDataset * SOAP_FMAC2 soap_instantiate___ns1__getRegionDataset(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getRegionDataset(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__getRegionDataset *p;
	size_t k = sizeof(struct __ns1__getRegionDataset);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__getRegionDataset, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__getRegionDataset);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__getRegionDataset, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__getRegionDataset location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionDataset(struct soap *soap, const struct __ns1__getRegionDataset *a, const char *tag, const char *type)
{
	if (soap_out___ns1__getRegionDataset(soap, tag ? tag : "-ns1:getRegionDataset", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getRegionDataset * SOAP_FMAC4 soap_get___ns1__getRegionDataset(struct soap *soap, struct __ns1__getRegionDataset *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getRegionDataset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getWeather(struct soap *soap, _ns1__getWeather *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getWeather))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getWeather(struct soap *soap, const char *tag, int id, _ns1__getWeather *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getWeather, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getWeather ? type : NULL);
}

SOAP_FMAC3 _ns1__getWeather ** SOAP_FMAC4 soap_in_PointerTo_ns1__getWeather(struct soap *soap, const char *tag, _ns1__getWeather **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getWeather **)soap_malloc(soap, sizeof(_ns1__getWeather *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getWeather *)soap_instantiate__ns1__getWeather(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getWeather **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getWeather, sizeof(_ns1__getWeather), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getWeather(struct soap *soap, _ns1__getWeather *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getWeather(soap, tag ? tag : "ns1:getWeather", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getWeather ** SOAP_FMAC4 soap_get_PointerTo_ns1__getWeather(struct soap *soap, _ns1__getWeather **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getWeather(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportCityString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCityString(struct soap *soap, const char *tag, int id, _ns1__getSupportCityString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportCityString, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getSupportCityString ? type : NULL);
}

SOAP_FMAC3 _ns1__getSupportCityString ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCityString(struct soap *soap, const char *tag, _ns1__getSupportCityString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportCityString **)soap_malloc(soap, sizeof(_ns1__getSupportCityString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportCityString *)soap_instantiate__ns1__getSupportCityString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getSupportCityString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportCityString, sizeof(_ns1__getSupportCityString), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getSupportCityString(soap, tag ? tag : "ns1:getSupportCityString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportCityString ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportCityString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportCityDataset))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCityDataset(struct soap *soap, const char *tag, int id, _ns1__getSupportCityDataset *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportCityDataset, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getSupportCityDataset ? type : NULL);
}

SOAP_FMAC3 _ns1__getSupportCityDataset ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCityDataset(struct soap *soap, const char *tag, _ns1__getSupportCityDataset **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportCityDataset **)soap_malloc(soap, sizeof(_ns1__getSupportCityDataset *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportCityDataset *)soap_instantiate__ns1__getSupportCityDataset(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getSupportCityDataset **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportCityDataset, sizeof(_ns1__getSupportCityDataset), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getSupportCityDataset(soap, tag ? tag : "ns1:getSupportCityDataset", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportCityDataset ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportCityDataset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getRegionCountry))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionCountry(struct soap *soap, const char *tag, int id, _ns1__getRegionCountry *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getRegionCountry, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getRegionCountry ? type : NULL);
}

SOAP_FMAC3 _ns1__getRegionCountry ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionCountry(struct soap *soap, const char *tag, _ns1__getRegionCountry **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getRegionCountry **)soap_malloc(soap, sizeof(_ns1__getRegionCountry *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getRegionCountry *)soap_instantiate__ns1__getRegionCountry(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getRegionCountry **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getRegionCountry, sizeof(_ns1__getRegionCountry), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getRegionCountry(soap, tag ? tag : "ns1:getRegionCountry", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getRegionCountry ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getRegionCountry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getRegionProvince))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionProvince(struct soap *soap, const char *tag, int id, _ns1__getRegionProvince *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getRegionProvince, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getRegionProvince ? type : NULL);
}

SOAP_FMAC3 _ns1__getRegionProvince ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionProvince(struct soap *soap, const char *tag, _ns1__getRegionProvince **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getRegionProvince **)soap_malloc(soap, sizeof(_ns1__getRegionProvince *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getRegionProvince *)soap_instantiate__ns1__getRegionProvince(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getRegionProvince **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getRegionProvince, sizeof(_ns1__getRegionProvince), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getRegionProvince(soap, tag ? tag : "ns1:getRegionProvince", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getRegionProvince ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getRegionProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getRegionDataset))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionDataset(struct soap *soap, const char *tag, int id, _ns1__getRegionDataset *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getRegionDataset, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getRegionDataset ? type : NULL);
}

SOAP_FMAC3 _ns1__getRegionDataset ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionDataset(struct soap *soap, const char *tag, _ns1__getRegionDataset **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getRegionDataset **)soap_malloc(soap, sizeof(_ns1__getRegionDataset *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getRegionDataset *)soap_instantiate__ns1__getRegionDataset(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getRegionDataset **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getRegionDataset, sizeof(_ns1__getRegionDataset), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getRegionDataset(soap, tag ? tag : "ns1:getRegionDataset", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getRegionDataset ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getRegionDataset(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *tag, int id, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ? type : NULL);
}

SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *tag, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult **)soap_malloc(soap, sizeof(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *)soap_instantiate__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, sizeof(_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag ? tag : "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, int id, ns1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfString, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? type : NULL);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfString **)soap_malloc(soap, sizeof(ns1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfString *)soap_instantiate_ns1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__ArrayOfString(soap, tag ? tag : "ns1:ArrayOfString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *tag, int id, _ns1__getRegionDatasetResponse_getRegionDatasetResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult ? type : NULL);
}

SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *tag, _ns1__getRegionDatasetResponse_getRegionDatasetResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getRegionDatasetResponse_getRegionDatasetResult **)soap_malloc(soap, sizeof(_ns1__getRegionDatasetResponse_getRegionDatasetResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getRegionDatasetResponse_getRegionDatasetResult *)soap_instantiate__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__getRegionDatasetResponse_getRegionDatasetResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult, sizeof(_ns1__getRegionDatasetResponse_getRegionDatasetResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag ? tag : "ns1:getRegionDatasetResponse-getRegionDatasetResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap *soap, std::vector<std::wstring> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap *soap, const std::vector<std::wstring> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::wstring> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__wstring(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap *soap, const char *tag, int id, const std::vector<std::wstring> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::wstring> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__wstring(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::wstring> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap *soap, const char *tag, std::vector<std::wstring> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__wstring(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::wstring n;
		soap_default_std__wstring(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_std__wstring, SOAP_TYPE_std__vectorTemplateOfstd__wstring, sizeof(std::wstring), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_std__wstring(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__wstring(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::wstring));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::wstring));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::wstring));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::wstring>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::wstring> *p;
	size_t k = sizeof(std::vector<std::wstring> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfstd__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::wstring> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::wstring> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::wstring>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
