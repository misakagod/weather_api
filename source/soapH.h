/* soapH.h
   Generated by gSOAP 2.8.70 for weather.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult_DEFINED
#define SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, const char*, int, const _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *, const char*);
SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * SOAP_FMAC4 soap_in__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, const char*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *, const char*);
SOAP_FMAC1 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * soap_new__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * soap_new_req__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *_p = ::soap_new__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * soap_new_set__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *_p = ::soap_new__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::xsd__schema = xsd__schema;
		_p->_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *URL, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *URL, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDatasetResponse-getSupportCityDatasetResult", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult * SOAP_FMAC4 soap_get__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *, const char*, const char*);

inline int soap_read__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, const char *URL, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap *soap, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *p)
{
	if (::soap_read__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult_DEFINED
#define SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, const char*, int, const _ns1__getRegionDatasetResponse_getRegionDatasetResult *, const char*);
SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult * SOAP_FMAC4 soap_in__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, const char*, _ns1__getRegionDatasetResponse_getRegionDatasetResult *, const char*);
SOAP_FMAC1 _ns1__getRegionDatasetResponse_getRegionDatasetResult * SOAP_FMAC2 soap_instantiate__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionDatasetResponse_getRegionDatasetResult * soap_new__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionDatasetResponse_getRegionDatasetResult * soap_new_req__ns1__getRegionDatasetResponse_getRegionDatasetResult(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__getRegionDatasetResponse_getRegionDatasetResult *_p = ::soap_new__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__getRegionDatasetResponse_getRegionDatasetResult * soap_new_set__ns1__getRegionDatasetResponse_getRegionDatasetResult(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__getRegionDatasetResponse_getRegionDatasetResult *_p = ::soap_new__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRegionDatasetResponse_getRegionDatasetResult::xsd__schema = xsd__schema;
		_p->_ns1__getRegionDatasetResponse_getRegionDatasetResult::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDatasetResponse-getRegionDatasetResult", p->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *URL, _ns1__getRegionDatasetResponse_getRegionDatasetResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDatasetResponse-getRegionDatasetResult", p->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *URL, _ns1__getRegionDatasetResponse_getRegionDatasetResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDatasetResponse-getRegionDatasetResult", p->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult * SOAP_FMAC4 soap_get__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, _ns1__getRegionDatasetResponse_getRegionDatasetResult *, const char*, const char*);

inline int soap_read__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, const char *URL, _ns1__getRegionDatasetResponse_getRegionDatasetResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap *soap, _ns1__getRegionDatasetResponse_getRegionDatasetResult *p)
{
	if (::soap_read__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED

inline void soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = ::soap_new_std__wstring(soap);
	if (_p)
	{	::soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__wstring(struct soap *soap, const char *URL, std::wstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__wstring(struct soap *soap, const char *URL, std::wstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__wstring(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__wstring(struct soap *soap, std::wstring *p)
{
	if (::soap_read_std__wstring(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DataSet_DEFINED
#define SOAP_TYPE__ns1__DataSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataSet(struct soap*, const char*, int, const _ns1__DataSet *, const char*);
SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_in__ns1__DataSet(struct soap*, const char*, _ns1__DataSet *, const char*);
SOAP_FMAC1 _ns1__DataSet * SOAP_FMAC2 soap_instantiate__ns1__DataSet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataSet * soap_new__ns1__DataSet(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DataSet(soap, n, NULL, NULL, NULL);
}

inline _ns1__DataSet * soap_new_req__ns1__DataSet(
	struct soap *soap,
	char *xsd__schema)
{
	_ns1__DataSet *_p = ::soap_new__ns1__DataSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataSet::xsd__schema = xsd__schema;
	}
	return _p;
}

inline _ns1__DataSet * soap_new_set__ns1__DataSet(
	struct soap *soap,
	char *xsd__schema,
	char *__any)
{
	_ns1__DataSet *_p = ::soap_new__ns1__DataSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataSet::xsd__schema = xsd__schema;
		_p->_ns1__DataSet::__any = __any;
	}
	return _p;
}

inline int soap_write__ns1__DataSet(struct soap *soap, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DataSet", p->soap_type() == SOAP_TYPE__ns1__DataSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DataSet * SOAP_FMAC4 soap_get__ns1__DataSet(struct soap*, _ns1__DataSet *, const char*, const char*);

inline int soap_read__ns1__DataSet(struct soap *soap, _ns1__DataSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DataSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DataSet(struct soap *soap, const char *URL, _ns1__DataSet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DataSet(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DataSet(struct soap *soap, _ns1__DataSet *p)
{
	if (::soap_read__ns1__DataSet(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getWeatherResponse_DEFINED
#define SOAP_TYPE__ns1__getWeatherResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeatherResponse(struct soap*, const char*, int, const _ns1__getWeatherResponse *, const char*);
SOAP_FMAC3 _ns1__getWeatherResponse * SOAP_FMAC4 soap_in__ns1__getWeatherResponse(struct soap*, const char*, _ns1__getWeatherResponse *, const char*);
SOAP_FMAC1 _ns1__getWeatherResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getWeatherResponse * soap_new__ns1__getWeatherResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getWeatherResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getWeatherResponse * soap_new_req__ns1__getWeatherResponse(
	struct soap *soap)
{
	_ns1__getWeatherResponse *_p = ::soap_new__ns1__getWeatherResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getWeatherResponse * soap_new_set__ns1__getWeatherResponse(
	struct soap *soap,
	ns1__ArrayOfString *getWeatherResult)
{
	_ns1__getWeatherResponse *_p = ::soap_new__ns1__getWeatherResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getWeatherResponse::getWeatherResult = getWeatherResult;
	}
	return _p;
}

inline int soap_write__ns1__getWeatherResponse(struct soap *soap, _ns1__getWeatherResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getWeatherResponse(struct soap *soap, const char *URL, _ns1__getWeatherResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getWeatherResponse(struct soap *soap, const char *URL, _ns1__getWeatherResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeatherResponse", p->soap_type() == SOAP_TYPE__ns1__getWeatherResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getWeatherResponse * SOAP_FMAC4 soap_get__ns1__getWeatherResponse(struct soap*, _ns1__getWeatherResponse *, const char*, const char*);

inline int soap_read__ns1__getWeatherResponse(struct soap *soap, _ns1__getWeatherResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getWeatherResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getWeatherResponse(struct soap *soap, const char *URL, _ns1__getWeatherResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getWeatherResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getWeatherResponse(struct soap *soap, _ns1__getWeatherResponse *p)
{
	if (::soap_read__ns1__getWeatherResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getWeather_DEFINED
#define SOAP_TYPE__ns1__getWeather_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getWeather(struct soap*, const char*, int, const _ns1__getWeather *, const char*);
SOAP_FMAC3 _ns1__getWeather * SOAP_FMAC4 soap_in__ns1__getWeather(struct soap*, const char*, _ns1__getWeather *, const char*);
SOAP_FMAC1 _ns1__getWeather * SOAP_FMAC2 soap_instantiate__ns1__getWeather(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getWeather * soap_new__ns1__getWeather(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getWeather(soap, n, NULL, NULL, NULL);
}

inline _ns1__getWeather * soap_new_req__ns1__getWeather(
	struct soap *soap)
{
	_ns1__getWeather *_p = ::soap_new__ns1__getWeather(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getWeather * soap_new_set__ns1__getWeather(
	struct soap *soap,
	std::wstring *theCityCode,
	std::wstring *theUserID)
{
	_ns1__getWeather *_p = ::soap_new__ns1__getWeather(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getWeather::theCityCode = theCityCode;
		_p->_ns1__getWeather::theUserID = theUserID;
	}
	return _p;
}

inline int soap_write__ns1__getWeather(struct soap *soap, _ns1__getWeather const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeather", p->soap_type() == SOAP_TYPE__ns1__getWeather ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getWeather(struct soap *soap, const char *URL, _ns1__getWeather const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeather", p->soap_type() == SOAP_TYPE__ns1__getWeather ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getWeather(struct soap *soap, const char *URL, _ns1__getWeather const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getWeather", p->soap_type() == SOAP_TYPE__ns1__getWeather ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getWeather * SOAP_FMAC4 soap_get__ns1__getWeather(struct soap*, _ns1__getWeather *, const char*, const char*);

inline int soap_read__ns1__getWeather(struct soap *soap, _ns1__getWeather *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getWeather(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getWeather(struct soap *soap, const char *URL, _ns1__getWeather *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getWeather(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getWeather(struct soap *soap, _ns1__getWeather *p)
{
	if (::soap_read__ns1__getWeather(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityStringResponse_DEFINED
#define SOAP_TYPE__ns1__getSupportCityStringResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityStringResponse(struct soap*, const char*, int, const _ns1__getSupportCityStringResponse *, const char*);
SOAP_FMAC3 _ns1__getSupportCityStringResponse * SOAP_FMAC4 soap_in__ns1__getSupportCityStringResponse(struct soap*, const char*, _ns1__getSupportCityStringResponse *, const char*);
SOAP_FMAC1 _ns1__getSupportCityStringResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityStringResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCityStringResponse * soap_new__ns1__getSupportCityStringResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCityStringResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCityStringResponse * soap_new_req__ns1__getSupportCityStringResponse(
	struct soap *soap)
{
	_ns1__getSupportCityStringResponse *_p = ::soap_new__ns1__getSupportCityStringResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportCityStringResponse * soap_new_set__ns1__getSupportCityStringResponse(
	struct soap *soap,
	ns1__ArrayOfString *getSupportCityStringResult)
{
	_ns1__getSupportCityStringResponse *_p = ::soap_new__ns1__getSupportCityStringResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityStringResponse::getSupportCityStringResult = getSupportCityStringResult;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCityStringResponse(struct soap *soap, _ns1__getSupportCityStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityStringResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityStringResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCityStringResponse(struct soap *soap, const char *URL, _ns1__getSupportCityStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityStringResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityStringResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCityStringResponse(struct soap *soap, const char *URL, _ns1__getSupportCityStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityStringResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityStringResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCityStringResponse * SOAP_FMAC4 soap_get__ns1__getSupportCityStringResponse(struct soap*, _ns1__getSupportCityStringResponse *, const char*, const char*);

inline int soap_read__ns1__getSupportCityStringResponse(struct soap *soap, _ns1__getSupportCityStringResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCityStringResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCityStringResponse(struct soap *soap, const char *URL, _ns1__getSupportCityStringResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCityStringResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSupportCityStringResponse(struct soap *soap, _ns1__getSupportCityStringResponse *p)
{
	if (::soap_read__ns1__getSupportCityStringResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityString_DEFINED
#define SOAP_TYPE__ns1__getSupportCityString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityString(struct soap*, const char*, int, const _ns1__getSupportCityString *, const char*);
SOAP_FMAC3 _ns1__getSupportCityString * SOAP_FMAC4 soap_in__ns1__getSupportCityString(struct soap*, const char*, _ns1__getSupportCityString *, const char*);
SOAP_FMAC1 _ns1__getSupportCityString * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityString(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCityString * soap_new__ns1__getSupportCityString(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCityString(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCityString * soap_new_req__ns1__getSupportCityString(
	struct soap *soap)
{
	_ns1__getSupportCityString *_p = ::soap_new__ns1__getSupportCityString(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportCityString * soap_new_set__ns1__getSupportCityString(
	struct soap *soap,
	std::wstring *theRegionCode)
{
	_ns1__getSupportCityString *_p = ::soap_new__ns1__getSupportCityString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityString::theRegionCode = theRegionCode;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityString", p->soap_type() == SOAP_TYPE__ns1__getSupportCityString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCityString(struct soap *soap, const char *URL, _ns1__getSupportCityString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityString", p->soap_type() == SOAP_TYPE__ns1__getSupportCityString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCityString(struct soap *soap, const char *URL, _ns1__getSupportCityString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityString", p->soap_type() == SOAP_TYPE__ns1__getSupportCityString ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCityString * SOAP_FMAC4 soap_get__ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString *, const char*, const char*);

inline int soap_read__ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCityString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCityString(struct soap *soap, const char *URL, _ns1__getSupportCityString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCityString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSupportCityString(struct soap *soap, _ns1__getSupportCityString *p)
{
	if (::soap_read__ns1__getSupportCityString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityDatasetResponse_DEFINED
#define SOAP_TYPE__ns1__getSupportCityDatasetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityDatasetResponse(struct soap*, const char*, int, const _ns1__getSupportCityDatasetResponse *, const char*);
SOAP_FMAC3 _ns1__getSupportCityDatasetResponse * SOAP_FMAC4 soap_in__ns1__getSupportCityDatasetResponse(struct soap*, const char*, _ns1__getSupportCityDatasetResponse *, const char*);
SOAP_FMAC1 _ns1__getSupportCityDatasetResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityDatasetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCityDatasetResponse * soap_new__ns1__getSupportCityDatasetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCityDatasetResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCityDatasetResponse * soap_new_req__ns1__getSupportCityDatasetResponse(
	struct soap *soap)
{
	_ns1__getSupportCityDatasetResponse *_p = ::soap_new__ns1__getSupportCityDatasetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportCityDatasetResponse * soap_new_set__ns1__getSupportCityDatasetResponse(
	struct soap *soap,
	_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *getSupportCityDatasetResult)
{
	_ns1__getSupportCityDatasetResponse *_p = ::soap_new__ns1__getSupportCityDatasetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityDatasetResponse::getSupportCityDatasetResult = getSupportCityDatasetResult;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCityDatasetResponse(struct soap *soap, _ns1__getSupportCityDatasetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDatasetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCityDatasetResponse(struct soap *soap, const char *URL, _ns1__getSupportCityDatasetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDatasetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCityDatasetResponse(struct soap *soap, const char *URL, _ns1__getSupportCityDatasetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDatasetResponse", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDatasetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCityDatasetResponse * SOAP_FMAC4 soap_get__ns1__getSupportCityDatasetResponse(struct soap*, _ns1__getSupportCityDatasetResponse *, const char*, const char*);

inline int soap_read__ns1__getSupportCityDatasetResponse(struct soap *soap, _ns1__getSupportCityDatasetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCityDatasetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCityDatasetResponse(struct soap *soap, const char *URL, _ns1__getSupportCityDatasetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCityDatasetResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSupportCityDatasetResponse(struct soap *soap, _ns1__getSupportCityDatasetResponse *p)
{
	if (::soap_read__ns1__getSupportCityDatasetResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getSupportCityDataset_DEFINED
#define SOAP_TYPE__ns1__getSupportCityDataset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getSupportCityDataset(struct soap*, const char*, int, const _ns1__getSupportCityDataset *, const char*);
SOAP_FMAC3 _ns1__getSupportCityDataset * SOAP_FMAC4 soap_in__ns1__getSupportCityDataset(struct soap*, const char*, _ns1__getSupportCityDataset *, const char*);
SOAP_FMAC1 _ns1__getSupportCityDataset * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityDataset(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getSupportCityDataset * soap_new__ns1__getSupportCityDataset(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getSupportCityDataset(soap, n, NULL, NULL, NULL);
}

inline _ns1__getSupportCityDataset * soap_new_req__ns1__getSupportCityDataset(
	struct soap *soap)
{
	_ns1__getSupportCityDataset *_p = ::soap_new__ns1__getSupportCityDataset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getSupportCityDataset * soap_new_set__ns1__getSupportCityDataset(
	struct soap *soap,
	std::wstring *theRegionCode)
{
	_ns1__getSupportCityDataset *_p = ::soap_new__ns1__getSupportCityDataset(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getSupportCityDataset::theRegionCode = theRegionCode;
	}
	return _p;
}

inline int soap_write__ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDataset", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDataset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getSupportCityDataset(struct soap *soap, const char *URL, _ns1__getSupportCityDataset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDataset", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDataset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getSupportCityDataset(struct soap *soap, const char *URL, _ns1__getSupportCityDataset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getSupportCityDataset", p->soap_type() == SOAP_TYPE__ns1__getSupportCityDataset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getSupportCityDataset * SOAP_FMAC4 soap_get__ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset *, const char*, const char*);

inline int soap_read__ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getSupportCityDataset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getSupportCityDataset(struct soap *soap, const char *URL, _ns1__getSupportCityDataset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getSupportCityDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getSupportCityDataset(struct soap *soap, _ns1__getSupportCityDataset *p)
{
	if (::soap_read__ns1__getSupportCityDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionCountryResponse_DEFINED
#define SOAP_TYPE__ns1__getRegionCountryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionCountryResponse(struct soap*, const char*, int, const _ns1__getRegionCountryResponse *, const char*);
SOAP_FMAC3 _ns1__getRegionCountryResponse * SOAP_FMAC4 soap_in__ns1__getRegionCountryResponse(struct soap*, const char*, _ns1__getRegionCountryResponse *, const char*);
SOAP_FMAC1 _ns1__getRegionCountryResponse * SOAP_FMAC2 soap_instantiate__ns1__getRegionCountryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionCountryResponse * soap_new__ns1__getRegionCountryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionCountryResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionCountryResponse * soap_new_req__ns1__getRegionCountryResponse(
	struct soap *soap)
{
	_ns1__getRegionCountryResponse *_p = ::soap_new__ns1__getRegionCountryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRegionCountryResponse * soap_new_set__ns1__getRegionCountryResponse(
	struct soap *soap,
	ns1__ArrayOfString *getRegionCountryResult)
{
	_ns1__getRegionCountryResponse *_p = ::soap_new__ns1__getRegionCountryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRegionCountryResponse::getRegionCountryResult = getRegionCountryResult;
	}
	return _p;
}

inline int soap_write__ns1__getRegionCountryResponse(struct soap *soap, _ns1__getRegionCountryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionCountryResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionCountryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionCountryResponse(struct soap *soap, const char *URL, _ns1__getRegionCountryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionCountryResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionCountryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionCountryResponse(struct soap *soap, const char *URL, _ns1__getRegionCountryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionCountryResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionCountryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionCountryResponse * SOAP_FMAC4 soap_get__ns1__getRegionCountryResponse(struct soap*, _ns1__getRegionCountryResponse *, const char*, const char*);

inline int soap_read__ns1__getRegionCountryResponse(struct soap *soap, _ns1__getRegionCountryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionCountryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionCountryResponse(struct soap *soap, const char *URL, _ns1__getRegionCountryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionCountryResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionCountryResponse(struct soap *soap, _ns1__getRegionCountryResponse *p)
{
	if (::soap_read__ns1__getRegionCountryResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionCountry_DEFINED
#define SOAP_TYPE__ns1__getRegionCountry_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionCountry(struct soap*, const char*, int, const _ns1__getRegionCountry *, const char*);
SOAP_FMAC3 _ns1__getRegionCountry * SOAP_FMAC4 soap_in__ns1__getRegionCountry(struct soap*, const char*, _ns1__getRegionCountry *, const char*);
SOAP_FMAC1 _ns1__getRegionCountry * SOAP_FMAC2 soap_instantiate__ns1__getRegionCountry(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionCountry * soap_new__ns1__getRegionCountry(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionCountry(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionCountry * soap_new_req__ns1__getRegionCountry(
	struct soap *soap)
{
	_ns1__getRegionCountry *_p = ::soap_new__ns1__getRegionCountry(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRegionCountry * soap_new_set__ns1__getRegionCountry(
	struct soap *soap)
{
	_ns1__getRegionCountry *_p = ::soap_new__ns1__getRegionCountry(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionCountry", p->soap_type() == SOAP_TYPE__ns1__getRegionCountry ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionCountry(struct soap *soap, const char *URL, _ns1__getRegionCountry const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionCountry", p->soap_type() == SOAP_TYPE__ns1__getRegionCountry ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionCountry(struct soap *soap, const char *URL, _ns1__getRegionCountry const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionCountry", p->soap_type() == SOAP_TYPE__ns1__getRegionCountry ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionCountry * SOAP_FMAC4 soap_get__ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry *, const char*, const char*);

inline int soap_read__ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionCountry(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionCountry(struct soap *soap, const char *URL, _ns1__getRegionCountry *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionCountry(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionCountry(struct soap *soap, _ns1__getRegionCountry *p)
{
	if (::soap_read__ns1__getRegionCountry(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionProvinceResponse_DEFINED
#define SOAP_TYPE__ns1__getRegionProvinceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionProvinceResponse(struct soap*, const char*, int, const _ns1__getRegionProvinceResponse *, const char*);
SOAP_FMAC3 _ns1__getRegionProvinceResponse * SOAP_FMAC4 soap_in__ns1__getRegionProvinceResponse(struct soap*, const char*, _ns1__getRegionProvinceResponse *, const char*);
SOAP_FMAC1 _ns1__getRegionProvinceResponse * SOAP_FMAC2 soap_instantiate__ns1__getRegionProvinceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionProvinceResponse * soap_new__ns1__getRegionProvinceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionProvinceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionProvinceResponse * soap_new_req__ns1__getRegionProvinceResponse(
	struct soap *soap)
{
	_ns1__getRegionProvinceResponse *_p = ::soap_new__ns1__getRegionProvinceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRegionProvinceResponse * soap_new_set__ns1__getRegionProvinceResponse(
	struct soap *soap,
	ns1__ArrayOfString *getRegionProvinceResult)
{
	_ns1__getRegionProvinceResponse *_p = ::soap_new__ns1__getRegionProvinceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRegionProvinceResponse::getRegionProvinceResult = getRegionProvinceResult;
	}
	return _p;
}

inline int soap_write__ns1__getRegionProvinceResponse(struct soap *soap, _ns1__getRegionProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionProvinceResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionProvinceResponse(struct soap *soap, const char *URL, _ns1__getRegionProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionProvinceResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionProvinceResponse(struct soap *soap, const char *URL, _ns1__getRegionProvinceResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionProvinceResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionProvinceResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionProvinceResponse * SOAP_FMAC4 soap_get__ns1__getRegionProvinceResponse(struct soap*, _ns1__getRegionProvinceResponse *, const char*, const char*);

inline int soap_read__ns1__getRegionProvinceResponse(struct soap *soap, _ns1__getRegionProvinceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionProvinceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionProvinceResponse(struct soap *soap, const char *URL, _ns1__getRegionProvinceResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionProvinceResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionProvinceResponse(struct soap *soap, _ns1__getRegionProvinceResponse *p)
{
	if (::soap_read__ns1__getRegionProvinceResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionProvince_DEFINED
#define SOAP_TYPE__ns1__getRegionProvince_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionProvince(struct soap*, const char*, int, const _ns1__getRegionProvince *, const char*);
SOAP_FMAC3 _ns1__getRegionProvince * SOAP_FMAC4 soap_in__ns1__getRegionProvince(struct soap*, const char*, _ns1__getRegionProvince *, const char*);
SOAP_FMAC1 _ns1__getRegionProvince * SOAP_FMAC2 soap_instantiate__ns1__getRegionProvince(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionProvince * soap_new__ns1__getRegionProvince(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionProvince(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionProvince * soap_new_req__ns1__getRegionProvince(
	struct soap *soap)
{
	_ns1__getRegionProvince *_p = ::soap_new__ns1__getRegionProvince(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRegionProvince * soap_new_set__ns1__getRegionProvince(
	struct soap *soap)
{
	_ns1__getRegionProvince *_p = ::soap_new__ns1__getRegionProvince(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionProvince", p->soap_type() == SOAP_TYPE__ns1__getRegionProvince ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionProvince(struct soap *soap, const char *URL, _ns1__getRegionProvince const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionProvince", p->soap_type() == SOAP_TYPE__ns1__getRegionProvince ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionProvince(struct soap *soap, const char *URL, _ns1__getRegionProvince const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionProvince", p->soap_type() == SOAP_TYPE__ns1__getRegionProvince ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionProvince * SOAP_FMAC4 soap_get__ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince *, const char*, const char*);

inline int soap_read__ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionProvince(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionProvince(struct soap *soap, const char *URL, _ns1__getRegionProvince *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionProvince(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionProvince(struct soap *soap, _ns1__getRegionProvince *p)
{
	if (::soap_read__ns1__getRegionProvince(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionDatasetResponse_DEFINED
#define SOAP_TYPE__ns1__getRegionDatasetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionDatasetResponse(struct soap*, const char*, int, const _ns1__getRegionDatasetResponse *, const char*);
SOAP_FMAC3 _ns1__getRegionDatasetResponse * SOAP_FMAC4 soap_in__ns1__getRegionDatasetResponse(struct soap*, const char*, _ns1__getRegionDatasetResponse *, const char*);
SOAP_FMAC1 _ns1__getRegionDatasetResponse * SOAP_FMAC2 soap_instantiate__ns1__getRegionDatasetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionDatasetResponse * soap_new__ns1__getRegionDatasetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionDatasetResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionDatasetResponse * soap_new_req__ns1__getRegionDatasetResponse(
	struct soap *soap)
{
	_ns1__getRegionDatasetResponse *_p = ::soap_new__ns1__getRegionDatasetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRegionDatasetResponse * soap_new_set__ns1__getRegionDatasetResponse(
	struct soap *soap,
	_ns1__getRegionDatasetResponse_getRegionDatasetResult *getRegionDatasetResult)
{
	_ns1__getRegionDatasetResponse *_p = ::soap_new__ns1__getRegionDatasetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getRegionDatasetResponse::getRegionDatasetResult = getRegionDatasetResult;
	}
	return _p;
}

inline int soap_write__ns1__getRegionDatasetResponse(struct soap *soap, _ns1__getRegionDatasetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDatasetResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionDatasetResponse(struct soap *soap, const char *URL, _ns1__getRegionDatasetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDatasetResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionDatasetResponse(struct soap *soap, const char *URL, _ns1__getRegionDatasetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDatasetResponse", p->soap_type() == SOAP_TYPE__ns1__getRegionDatasetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionDatasetResponse * SOAP_FMAC4 soap_get__ns1__getRegionDatasetResponse(struct soap*, _ns1__getRegionDatasetResponse *, const char*, const char*);

inline int soap_read__ns1__getRegionDatasetResponse(struct soap *soap, _ns1__getRegionDatasetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionDatasetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionDatasetResponse(struct soap *soap, const char *URL, _ns1__getRegionDatasetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionDatasetResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionDatasetResponse(struct soap *soap, _ns1__getRegionDatasetResponse *p)
{
	if (::soap_read__ns1__getRegionDatasetResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getRegionDataset_DEFINED
#define SOAP_TYPE__ns1__getRegionDataset_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getRegionDataset(struct soap*, const char*, int, const _ns1__getRegionDataset *, const char*);
SOAP_FMAC3 _ns1__getRegionDataset * SOAP_FMAC4 soap_in__ns1__getRegionDataset(struct soap*, const char*, _ns1__getRegionDataset *, const char*);
SOAP_FMAC1 _ns1__getRegionDataset * SOAP_FMAC2 soap_instantiate__ns1__getRegionDataset(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getRegionDataset * soap_new__ns1__getRegionDataset(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getRegionDataset(soap, n, NULL, NULL, NULL);
}

inline _ns1__getRegionDataset * soap_new_req__ns1__getRegionDataset(
	struct soap *soap)
{
	_ns1__getRegionDataset *_p = ::soap_new__ns1__getRegionDataset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__getRegionDataset * soap_new_set__ns1__getRegionDataset(
	struct soap *soap)
{
	_ns1__getRegionDataset *_p = ::soap_new__ns1__getRegionDataset(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDataset", p->soap_type() == SOAP_TYPE__ns1__getRegionDataset ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__getRegionDataset(struct soap *soap, const char *URL, _ns1__getRegionDataset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDataset", p->soap_type() == SOAP_TYPE__ns1__getRegionDataset ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__getRegionDataset(struct soap *soap, const char *URL, _ns1__getRegionDataset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getRegionDataset", p->soap_type() == SOAP_TYPE__ns1__getRegionDataset ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getRegionDataset * SOAP_FMAC4 soap_get__ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset *, const char*, const char*);

inline int soap_read__ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__getRegionDataset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__getRegionDataset(struct soap *soap, const char *URL, _ns1__getRegionDataset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__getRegionDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__getRegionDataset(struct soap *soap, _ns1__getRegionDataset *p)
{
	if (::soap_read__ns1__getRegionDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfString_DEFINED
#define SOAP_TYPE_ns1__ArrayOfString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap*, const char*, int, const ns1__ArrayOfString *, const char*);
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString *, const char*);
SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfString * soap_new_ns1__ArrayOfString(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfString(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfString * soap_new_req_ns1__ArrayOfString(
	struct soap *soap)
{
	ns1__ArrayOfString *_p = ::soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfString * soap_new_set_ns1__ArrayOfString(
	struct soap *soap,
	const std::vector<std::wstring> & string)
{
	ns1__ArrayOfString *_p = ::soap_new_ns1__ArrayOfString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfString::string = string;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfString", p->soap_type() == SOAP_TYPE_ns1__ArrayOfString ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap*, ns1__ArrayOfString *, const char*, const char*);

inline int soap_read_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfString(struct soap *soap, const char *URL, ns1__ArrayOfString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{
	if (::soap_read_ns1__ArrayOfString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getWeather__DEFINED
#define SOAP_TYPE___ns1__getWeather__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeather_(struct soap*, struct __ns1__getWeather_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeather_(struct soap*, const struct __ns1__getWeather_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeather_(struct soap*, const char*, int, const struct __ns1__getWeather_ *, const char*);
SOAP_FMAC3 struct __ns1__getWeather_ * SOAP_FMAC4 soap_in___ns1__getWeather_(struct soap*, const char*, struct __ns1__getWeather_ *, const char*);
SOAP_FMAC1 struct __ns1__getWeather_ * SOAP_FMAC2 soap_instantiate___ns1__getWeather_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWeather_ * soap_new___ns1__getWeather_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getWeather_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWeather_ * soap_new_req___ns1__getWeather_(
	struct soap *soap)
{
	struct __ns1__getWeather_ *_p = ::soap_new___ns1__getWeather_(soap);
	if (_p)
	{	::soap_default___ns1__getWeather_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWeather_ * soap_new_set___ns1__getWeather_(
	struct soap *soap,
	_ns1__getWeather *ns1__getWeather)
{
	struct __ns1__getWeather_ *_p = ::soap_new___ns1__getWeather_(soap);
	if (_p)
	{	::soap_default___ns1__getWeather_(soap, _p);
		_p->ns1__getWeather = ns1__getWeather;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeather_(struct soap*, const struct __ns1__getWeather_ *, const char*, const char*);

inline int soap_write___ns1__getWeather_(struct soap *soap, struct __ns1__getWeather_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getWeather_(soap, p), 0) || ::soap_put___ns1__getWeather_(soap, p, "-ns1:getWeather", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getWeather_(struct soap *soap, const char *URL, struct __ns1__getWeather_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeather_(soap, p), 0) || ::soap_put___ns1__getWeather_(soap, p, "-ns1:getWeather", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getWeather_(struct soap *soap, const char *URL, struct __ns1__getWeather_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeather_(soap, p), 0) || ::soap_put___ns1__getWeather_(soap, p, "-ns1:getWeather", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWeather_ * SOAP_FMAC4 soap_get___ns1__getWeather_(struct soap*, struct __ns1__getWeather_ *, const char*, const char*);

inline int soap_read___ns1__getWeather_(struct soap *soap, struct __ns1__getWeather_ *p)
{
	if (p)
	{	::soap_default___ns1__getWeather_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getWeather_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getWeather_(struct soap *soap, const char *URL, struct __ns1__getWeather_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getWeather_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getWeather_(struct soap *soap, struct __ns1__getWeather_ *p)
{
	if (::soap_read___ns1__getWeather_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportCityString__DEFINED
#define SOAP_TYPE___ns1__getSupportCityString__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityString_(struct soap*, struct __ns1__getSupportCityString_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityString_(struct soap*, const struct __ns1__getSupportCityString_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityString_(struct soap*, const char*, int, const struct __ns1__getSupportCityString_ *, const char*);
SOAP_FMAC3 struct __ns1__getSupportCityString_ * SOAP_FMAC4 soap_in___ns1__getSupportCityString_(struct soap*, const char*, struct __ns1__getSupportCityString_ *, const char*);
SOAP_FMAC1 struct __ns1__getSupportCityString_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityString_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportCityString_ * soap_new___ns1__getSupportCityString_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportCityString_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportCityString_ * soap_new_req___ns1__getSupportCityString_(
	struct soap *soap)
{
	struct __ns1__getSupportCityString_ *_p = ::soap_new___ns1__getSupportCityString_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityString_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportCityString_ * soap_new_set___ns1__getSupportCityString_(
	struct soap *soap,
	_ns1__getSupportCityString *ns1__getSupportCityString)
{
	struct __ns1__getSupportCityString_ *_p = ::soap_new___ns1__getSupportCityString_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityString_(soap, _p);
		_p->ns1__getSupportCityString = ns1__getSupportCityString;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityString_(struct soap*, const struct __ns1__getSupportCityString_ *, const char*, const char*);

inline int soap_write___ns1__getSupportCityString_(struct soap *soap, struct __ns1__getSupportCityString_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportCityString_(soap, p), 0) || ::soap_put___ns1__getSupportCityString_(soap, p, "-ns1:getSupportCityString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportCityString_(struct soap *soap, const char *URL, struct __ns1__getSupportCityString_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityString_(soap, p), 0) || ::soap_put___ns1__getSupportCityString_(soap, p, "-ns1:getSupportCityString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportCityString_(struct soap *soap, const char *URL, struct __ns1__getSupportCityString_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityString_(soap, p), 0) || ::soap_put___ns1__getSupportCityString_(soap, p, "-ns1:getSupportCityString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportCityString_ * SOAP_FMAC4 soap_get___ns1__getSupportCityString_(struct soap*, struct __ns1__getSupportCityString_ *, const char*, const char*);

inline int soap_read___ns1__getSupportCityString_(struct soap *soap, struct __ns1__getSupportCityString_ *p)
{
	if (p)
	{	::soap_default___ns1__getSupportCityString_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportCityString_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportCityString_(struct soap *soap, const char *URL, struct __ns1__getSupportCityString_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportCityString_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getSupportCityString_(struct soap *soap, struct __ns1__getSupportCityString_ *p)
{
	if (::soap_read___ns1__getSupportCityString_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportCityDataset__DEFINED
#define SOAP_TYPE___ns1__getSupportCityDataset__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityDataset_(struct soap*, struct __ns1__getSupportCityDataset_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityDataset_(struct soap*, const struct __ns1__getSupportCityDataset_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityDataset_(struct soap*, const char*, int, const struct __ns1__getSupportCityDataset_ *, const char*);
SOAP_FMAC3 struct __ns1__getSupportCityDataset_ * SOAP_FMAC4 soap_in___ns1__getSupportCityDataset_(struct soap*, const char*, struct __ns1__getSupportCityDataset_ *, const char*);
SOAP_FMAC1 struct __ns1__getSupportCityDataset_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityDataset_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportCityDataset_ * soap_new___ns1__getSupportCityDataset_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportCityDataset_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportCityDataset_ * soap_new_req___ns1__getSupportCityDataset_(
	struct soap *soap)
{
	struct __ns1__getSupportCityDataset_ *_p = ::soap_new___ns1__getSupportCityDataset_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityDataset_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportCityDataset_ * soap_new_set___ns1__getSupportCityDataset_(
	struct soap *soap,
	_ns1__getSupportCityDataset *ns1__getSupportCityDataset)
{
	struct __ns1__getSupportCityDataset_ *_p = ::soap_new___ns1__getSupportCityDataset_(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityDataset_(soap, _p);
		_p->ns1__getSupportCityDataset = ns1__getSupportCityDataset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityDataset_(struct soap*, const struct __ns1__getSupportCityDataset_ *, const char*, const char*);

inline int soap_write___ns1__getSupportCityDataset_(struct soap *soap, struct __ns1__getSupportCityDataset_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportCityDataset_(soap, p), 0) || ::soap_put___ns1__getSupportCityDataset_(soap, p, "-ns1:getSupportCityDataset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportCityDataset_(struct soap *soap, const char *URL, struct __ns1__getSupportCityDataset_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityDataset_(soap, p), 0) || ::soap_put___ns1__getSupportCityDataset_(soap, p, "-ns1:getSupportCityDataset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportCityDataset_(struct soap *soap, const char *URL, struct __ns1__getSupportCityDataset_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityDataset_(soap, p), 0) || ::soap_put___ns1__getSupportCityDataset_(soap, p, "-ns1:getSupportCityDataset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportCityDataset_ * SOAP_FMAC4 soap_get___ns1__getSupportCityDataset_(struct soap*, struct __ns1__getSupportCityDataset_ *, const char*, const char*);

inline int soap_read___ns1__getSupportCityDataset_(struct soap *soap, struct __ns1__getSupportCityDataset_ *p)
{
	if (p)
	{	::soap_default___ns1__getSupportCityDataset_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportCityDataset_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportCityDataset_(struct soap *soap, const char *URL, struct __ns1__getSupportCityDataset_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportCityDataset_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getSupportCityDataset_(struct soap *soap, struct __ns1__getSupportCityDataset_ *p)
{
	if (::soap_read___ns1__getSupportCityDataset_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRegionCountry__DEFINED
#define SOAP_TYPE___ns1__getRegionCountry__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionCountry_(struct soap*, struct __ns1__getRegionCountry_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionCountry_(struct soap*, const struct __ns1__getRegionCountry_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionCountry_(struct soap*, const char*, int, const struct __ns1__getRegionCountry_ *, const char*);
SOAP_FMAC3 struct __ns1__getRegionCountry_ * SOAP_FMAC4 soap_in___ns1__getRegionCountry_(struct soap*, const char*, struct __ns1__getRegionCountry_ *, const char*);
SOAP_FMAC1 struct __ns1__getRegionCountry_ * SOAP_FMAC2 soap_instantiate___ns1__getRegionCountry_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRegionCountry_ * soap_new___ns1__getRegionCountry_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRegionCountry_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRegionCountry_ * soap_new_req___ns1__getRegionCountry_(
	struct soap *soap)
{
	struct __ns1__getRegionCountry_ *_p = ::soap_new___ns1__getRegionCountry_(soap);
	if (_p)
	{	::soap_default___ns1__getRegionCountry_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRegionCountry_ * soap_new_set___ns1__getRegionCountry_(
	struct soap *soap,
	_ns1__getRegionCountry *ns1__getRegionCountry)
{
	struct __ns1__getRegionCountry_ *_p = ::soap_new___ns1__getRegionCountry_(soap);
	if (_p)
	{	::soap_default___ns1__getRegionCountry_(soap, _p);
		_p->ns1__getRegionCountry = ns1__getRegionCountry;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionCountry_(struct soap*, const struct __ns1__getRegionCountry_ *, const char*, const char*);

inline int soap_write___ns1__getRegionCountry_(struct soap *soap, struct __ns1__getRegionCountry_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRegionCountry_(soap, p), 0) || ::soap_put___ns1__getRegionCountry_(soap, p, "-ns1:getRegionCountry", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRegionCountry_(struct soap *soap, const char *URL, struct __ns1__getRegionCountry_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionCountry_(soap, p), 0) || ::soap_put___ns1__getRegionCountry_(soap, p, "-ns1:getRegionCountry", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRegionCountry_(struct soap *soap, const char *URL, struct __ns1__getRegionCountry_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionCountry_(soap, p), 0) || ::soap_put___ns1__getRegionCountry_(soap, p, "-ns1:getRegionCountry", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRegionCountry_ * SOAP_FMAC4 soap_get___ns1__getRegionCountry_(struct soap*, struct __ns1__getRegionCountry_ *, const char*, const char*);

inline int soap_read___ns1__getRegionCountry_(struct soap *soap, struct __ns1__getRegionCountry_ *p)
{
	if (p)
	{	::soap_default___ns1__getRegionCountry_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRegionCountry_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRegionCountry_(struct soap *soap, const char *URL, struct __ns1__getRegionCountry_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRegionCountry_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRegionCountry_(struct soap *soap, struct __ns1__getRegionCountry_ *p)
{
	if (::soap_read___ns1__getRegionCountry_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRegionProvince__DEFINED
#define SOAP_TYPE___ns1__getRegionProvince__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionProvince_(struct soap*, struct __ns1__getRegionProvince_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionProvince_(struct soap*, const struct __ns1__getRegionProvince_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionProvince_(struct soap*, const char*, int, const struct __ns1__getRegionProvince_ *, const char*);
SOAP_FMAC3 struct __ns1__getRegionProvince_ * SOAP_FMAC4 soap_in___ns1__getRegionProvince_(struct soap*, const char*, struct __ns1__getRegionProvince_ *, const char*);
SOAP_FMAC1 struct __ns1__getRegionProvince_ * SOAP_FMAC2 soap_instantiate___ns1__getRegionProvince_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRegionProvince_ * soap_new___ns1__getRegionProvince_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRegionProvince_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRegionProvince_ * soap_new_req___ns1__getRegionProvince_(
	struct soap *soap)
{
	struct __ns1__getRegionProvince_ *_p = ::soap_new___ns1__getRegionProvince_(soap);
	if (_p)
	{	::soap_default___ns1__getRegionProvince_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRegionProvince_ * soap_new_set___ns1__getRegionProvince_(
	struct soap *soap,
	_ns1__getRegionProvince *ns1__getRegionProvince)
{
	struct __ns1__getRegionProvince_ *_p = ::soap_new___ns1__getRegionProvince_(soap);
	if (_p)
	{	::soap_default___ns1__getRegionProvince_(soap, _p);
		_p->ns1__getRegionProvince = ns1__getRegionProvince;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionProvince_(struct soap*, const struct __ns1__getRegionProvince_ *, const char*, const char*);

inline int soap_write___ns1__getRegionProvince_(struct soap *soap, struct __ns1__getRegionProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRegionProvince_(soap, p), 0) || ::soap_put___ns1__getRegionProvince_(soap, p, "-ns1:getRegionProvince", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRegionProvince_(struct soap *soap, const char *URL, struct __ns1__getRegionProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionProvince_(soap, p), 0) || ::soap_put___ns1__getRegionProvince_(soap, p, "-ns1:getRegionProvince", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRegionProvince_(struct soap *soap, const char *URL, struct __ns1__getRegionProvince_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionProvince_(soap, p), 0) || ::soap_put___ns1__getRegionProvince_(soap, p, "-ns1:getRegionProvince", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRegionProvince_ * SOAP_FMAC4 soap_get___ns1__getRegionProvince_(struct soap*, struct __ns1__getRegionProvince_ *, const char*, const char*);

inline int soap_read___ns1__getRegionProvince_(struct soap *soap, struct __ns1__getRegionProvince_ *p)
{
	if (p)
	{	::soap_default___ns1__getRegionProvince_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRegionProvince_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRegionProvince_(struct soap *soap, const char *URL, struct __ns1__getRegionProvince_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRegionProvince_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRegionProvince_(struct soap *soap, struct __ns1__getRegionProvince_ *p)
{
	if (::soap_read___ns1__getRegionProvince_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRegionDataset__DEFINED
#define SOAP_TYPE___ns1__getRegionDataset__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionDataset_(struct soap*, struct __ns1__getRegionDataset_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionDataset_(struct soap*, const struct __ns1__getRegionDataset_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionDataset_(struct soap*, const char*, int, const struct __ns1__getRegionDataset_ *, const char*);
SOAP_FMAC3 struct __ns1__getRegionDataset_ * SOAP_FMAC4 soap_in___ns1__getRegionDataset_(struct soap*, const char*, struct __ns1__getRegionDataset_ *, const char*);
SOAP_FMAC1 struct __ns1__getRegionDataset_ * SOAP_FMAC2 soap_instantiate___ns1__getRegionDataset_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRegionDataset_ * soap_new___ns1__getRegionDataset_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRegionDataset_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRegionDataset_ * soap_new_req___ns1__getRegionDataset_(
	struct soap *soap)
{
	struct __ns1__getRegionDataset_ *_p = ::soap_new___ns1__getRegionDataset_(soap);
	if (_p)
	{	::soap_default___ns1__getRegionDataset_(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRegionDataset_ * soap_new_set___ns1__getRegionDataset_(
	struct soap *soap,
	_ns1__getRegionDataset *ns1__getRegionDataset)
{
	struct __ns1__getRegionDataset_ *_p = ::soap_new___ns1__getRegionDataset_(soap);
	if (_p)
	{	::soap_default___ns1__getRegionDataset_(soap, _p);
		_p->ns1__getRegionDataset = ns1__getRegionDataset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionDataset_(struct soap*, const struct __ns1__getRegionDataset_ *, const char*, const char*);

inline int soap_write___ns1__getRegionDataset_(struct soap *soap, struct __ns1__getRegionDataset_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRegionDataset_(soap, p), 0) || ::soap_put___ns1__getRegionDataset_(soap, p, "-ns1:getRegionDataset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRegionDataset_(struct soap *soap, const char *URL, struct __ns1__getRegionDataset_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionDataset_(soap, p), 0) || ::soap_put___ns1__getRegionDataset_(soap, p, "-ns1:getRegionDataset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRegionDataset_(struct soap *soap, const char *URL, struct __ns1__getRegionDataset_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionDataset_(soap, p), 0) || ::soap_put___ns1__getRegionDataset_(soap, p, "-ns1:getRegionDataset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRegionDataset_ * SOAP_FMAC4 soap_get___ns1__getRegionDataset_(struct soap*, struct __ns1__getRegionDataset_ *, const char*, const char*);

inline int soap_read___ns1__getRegionDataset_(struct soap *soap, struct __ns1__getRegionDataset_ *p)
{
	if (p)
	{	::soap_default___ns1__getRegionDataset_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRegionDataset_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRegionDataset_(struct soap *soap, const char *URL, struct __ns1__getRegionDataset_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRegionDataset_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRegionDataset_(struct soap *soap, struct __ns1__getRegionDataset_ *p)
{
	if (::soap_read___ns1__getRegionDataset_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getWeather_DEFINED
#define SOAP_TYPE___ns1__getWeather_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getWeather(struct soap*, struct __ns1__getWeather *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getWeather(struct soap*, const struct __ns1__getWeather *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getWeather(struct soap*, const char*, int, const struct __ns1__getWeather *, const char*);
SOAP_FMAC3 struct __ns1__getWeather * SOAP_FMAC4 soap_in___ns1__getWeather(struct soap*, const char*, struct __ns1__getWeather *, const char*);
SOAP_FMAC1 struct __ns1__getWeather * SOAP_FMAC2 soap_instantiate___ns1__getWeather(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getWeather * soap_new___ns1__getWeather(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getWeather(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getWeather * soap_new_req___ns1__getWeather(
	struct soap *soap)
{
	struct __ns1__getWeather *_p = ::soap_new___ns1__getWeather(soap);
	if (_p)
	{	::soap_default___ns1__getWeather(soap, _p);
	}
	return _p;
}

inline struct __ns1__getWeather * soap_new_set___ns1__getWeather(
	struct soap *soap,
	_ns1__getWeather *ns1__getWeather)
{
	struct __ns1__getWeather *_p = ::soap_new___ns1__getWeather(soap);
	if (_p)
	{	::soap_default___ns1__getWeather(soap, _p);
		_p->ns1__getWeather = ns1__getWeather;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getWeather(struct soap*, const struct __ns1__getWeather *, const char*, const char*);

inline int soap_write___ns1__getWeather(struct soap *soap, struct __ns1__getWeather const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getWeather(soap, p), 0) || ::soap_put___ns1__getWeather(soap, p, "-ns1:getWeather", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getWeather(struct soap *soap, const char *URL, struct __ns1__getWeather const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeather(soap, p), 0) || ::soap_put___ns1__getWeather(soap, p, "-ns1:getWeather", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getWeather(struct soap *soap, const char *URL, struct __ns1__getWeather const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getWeather(soap, p), 0) || ::soap_put___ns1__getWeather(soap, p, "-ns1:getWeather", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getWeather * SOAP_FMAC4 soap_get___ns1__getWeather(struct soap*, struct __ns1__getWeather *, const char*, const char*);

inline int soap_read___ns1__getWeather(struct soap *soap, struct __ns1__getWeather *p)
{
	if (p)
	{	::soap_default___ns1__getWeather(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getWeather(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getWeather(struct soap *soap, const char *URL, struct __ns1__getWeather *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getWeather(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getWeather(struct soap *soap, struct __ns1__getWeather *p)
{
	if (::soap_read___ns1__getWeather(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportCityString_DEFINED
#define SOAP_TYPE___ns1__getSupportCityString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityString(struct soap*, struct __ns1__getSupportCityString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityString(struct soap*, const struct __ns1__getSupportCityString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityString(struct soap*, const char*, int, const struct __ns1__getSupportCityString *, const char*);
SOAP_FMAC3 struct __ns1__getSupportCityString * SOAP_FMAC4 soap_in___ns1__getSupportCityString(struct soap*, const char*, struct __ns1__getSupportCityString *, const char*);
SOAP_FMAC1 struct __ns1__getSupportCityString * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityString(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportCityString * soap_new___ns1__getSupportCityString(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportCityString(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportCityString * soap_new_req___ns1__getSupportCityString(
	struct soap *soap)
{
	struct __ns1__getSupportCityString *_p = ::soap_new___ns1__getSupportCityString(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityString(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportCityString * soap_new_set___ns1__getSupportCityString(
	struct soap *soap,
	_ns1__getSupportCityString *ns1__getSupportCityString)
{
	struct __ns1__getSupportCityString *_p = ::soap_new___ns1__getSupportCityString(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityString(soap, _p);
		_p->ns1__getSupportCityString = ns1__getSupportCityString;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityString(struct soap*, const struct __ns1__getSupportCityString *, const char*, const char*);

inline int soap_write___ns1__getSupportCityString(struct soap *soap, struct __ns1__getSupportCityString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportCityString(soap, p), 0) || ::soap_put___ns1__getSupportCityString(soap, p, "-ns1:getSupportCityString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportCityString(struct soap *soap, const char *URL, struct __ns1__getSupportCityString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityString(soap, p), 0) || ::soap_put___ns1__getSupportCityString(soap, p, "-ns1:getSupportCityString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportCityString(struct soap *soap, const char *URL, struct __ns1__getSupportCityString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityString(soap, p), 0) || ::soap_put___ns1__getSupportCityString(soap, p, "-ns1:getSupportCityString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportCityString * SOAP_FMAC4 soap_get___ns1__getSupportCityString(struct soap*, struct __ns1__getSupportCityString *, const char*, const char*);

inline int soap_read___ns1__getSupportCityString(struct soap *soap, struct __ns1__getSupportCityString *p)
{
	if (p)
	{	::soap_default___ns1__getSupportCityString(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportCityString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportCityString(struct soap *soap, const char *URL, struct __ns1__getSupportCityString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportCityString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getSupportCityString(struct soap *soap, struct __ns1__getSupportCityString *p)
{
	if (::soap_read___ns1__getSupportCityString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getSupportCityDataset_DEFINED
#define SOAP_TYPE___ns1__getSupportCityDataset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getSupportCityDataset(struct soap*, struct __ns1__getSupportCityDataset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getSupportCityDataset(struct soap*, const struct __ns1__getSupportCityDataset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getSupportCityDataset(struct soap*, const char*, int, const struct __ns1__getSupportCityDataset *, const char*);
SOAP_FMAC3 struct __ns1__getSupportCityDataset * SOAP_FMAC4 soap_in___ns1__getSupportCityDataset(struct soap*, const char*, struct __ns1__getSupportCityDataset *, const char*);
SOAP_FMAC1 struct __ns1__getSupportCityDataset * SOAP_FMAC2 soap_instantiate___ns1__getSupportCityDataset(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getSupportCityDataset * soap_new___ns1__getSupportCityDataset(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getSupportCityDataset(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getSupportCityDataset * soap_new_req___ns1__getSupportCityDataset(
	struct soap *soap)
{
	struct __ns1__getSupportCityDataset *_p = ::soap_new___ns1__getSupportCityDataset(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityDataset(soap, _p);
	}
	return _p;
}

inline struct __ns1__getSupportCityDataset * soap_new_set___ns1__getSupportCityDataset(
	struct soap *soap,
	_ns1__getSupportCityDataset *ns1__getSupportCityDataset)
{
	struct __ns1__getSupportCityDataset *_p = ::soap_new___ns1__getSupportCityDataset(soap);
	if (_p)
	{	::soap_default___ns1__getSupportCityDataset(soap, _p);
		_p->ns1__getSupportCityDataset = ns1__getSupportCityDataset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getSupportCityDataset(struct soap*, const struct __ns1__getSupportCityDataset *, const char*, const char*);

inline int soap_write___ns1__getSupportCityDataset(struct soap *soap, struct __ns1__getSupportCityDataset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getSupportCityDataset(soap, p), 0) || ::soap_put___ns1__getSupportCityDataset(soap, p, "-ns1:getSupportCityDataset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getSupportCityDataset(struct soap *soap, const char *URL, struct __ns1__getSupportCityDataset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityDataset(soap, p), 0) || ::soap_put___ns1__getSupportCityDataset(soap, p, "-ns1:getSupportCityDataset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getSupportCityDataset(struct soap *soap, const char *URL, struct __ns1__getSupportCityDataset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getSupportCityDataset(soap, p), 0) || ::soap_put___ns1__getSupportCityDataset(soap, p, "-ns1:getSupportCityDataset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getSupportCityDataset * SOAP_FMAC4 soap_get___ns1__getSupportCityDataset(struct soap*, struct __ns1__getSupportCityDataset *, const char*, const char*);

inline int soap_read___ns1__getSupportCityDataset(struct soap *soap, struct __ns1__getSupportCityDataset *p)
{
	if (p)
	{	::soap_default___ns1__getSupportCityDataset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getSupportCityDataset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getSupportCityDataset(struct soap *soap, const char *URL, struct __ns1__getSupportCityDataset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getSupportCityDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getSupportCityDataset(struct soap *soap, struct __ns1__getSupportCityDataset *p)
{
	if (::soap_read___ns1__getSupportCityDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRegionCountry_DEFINED
#define SOAP_TYPE___ns1__getRegionCountry_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionCountry(struct soap*, struct __ns1__getRegionCountry *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionCountry(struct soap*, const struct __ns1__getRegionCountry *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionCountry(struct soap*, const char*, int, const struct __ns1__getRegionCountry *, const char*);
SOAP_FMAC3 struct __ns1__getRegionCountry * SOAP_FMAC4 soap_in___ns1__getRegionCountry(struct soap*, const char*, struct __ns1__getRegionCountry *, const char*);
SOAP_FMAC1 struct __ns1__getRegionCountry * SOAP_FMAC2 soap_instantiate___ns1__getRegionCountry(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRegionCountry * soap_new___ns1__getRegionCountry(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRegionCountry(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRegionCountry * soap_new_req___ns1__getRegionCountry(
	struct soap *soap)
{
	struct __ns1__getRegionCountry *_p = ::soap_new___ns1__getRegionCountry(soap);
	if (_p)
	{	::soap_default___ns1__getRegionCountry(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRegionCountry * soap_new_set___ns1__getRegionCountry(
	struct soap *soap,
	_ns1__getRegionCountry *ns1__getRegionCountry)
{
	struct __ns1__getRegionCountry *_p = ::soap_new___ns1__getRegionCountry(soap);
	if (_p)
	{	::soap_default___ns1__getRegionCountry(soap, _p);
		_p->ns1__getRegionCountry = ns1__getRegionCountry;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionCountry(struct soap*, const struct __ns1__getRegionCountry *, const char*, const char*);

inline int soap_write___ns1__getRegionCountry(struct soap *soap, struct __ns1__getRegionCountry const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRegionCountry(soap, p), 0) || ::soap_put___ns1__getRegionCountry(soap, p, "-ns1:getRegionCountry", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRegionCountry(struct soap *soap, const char *URL, struct __ns1__getRegionCountry const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionCountry(soap, p), 0) || ::soap_put___ns1__getRegionCountry(soap, p, "-ns1:getRegionCountry", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRegionCountry(struct soap *soap, const char *URL, struct __ns1__getRegionCountry const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionCountry(soap, p), 0) || ::soap_put___ns1__getRegionCountry(soap, p, "-ns1:getRegionCountry", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRegionCountry * SOAP_FMAC4 soap_get___ns1__getRegionCountry(struct soap*, struct __ns1__getRegionCountry *, const char*, const char*);

inline int soap_read___ns1__getRegionCountry(struct soap *soap, struct __ns1__getRegionCountry *p)
{
	if (p)
	{	::soap_default___ns1__getRegionCountry(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRegionCountry(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRegionCountry(struct soap *soap, const char *URL, struct __ns1__getRegionCountry *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRegionCountry(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRegionCountry(struct soap *soap, struct __ns1__getRegionCountry *p)
{
	if (::soap_read___ns1__getRegionCountry(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRegionProvince_DEFINED
#define SOAP_TYPE___ns1__getRegionProvince_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionProvince(struct soap*, struct __ns1__getRegionProvince *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionProvince(struct soap*, const struct __ns1__getRegionProvince *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionProvince(struct soap*, const char*, int, const struct __ns1__getRegionProvince *, const char*);
SOAP_FMAC3 struct __ns1__getRegionProvince * SOAP_FMAC4 soap_in___ns1__getRegionProvince(struct soap*, const char*, struct __ns1__getRegionProvince *, const char*);
SOAP_FMAC1 struct __ns1__getRegionProvince * SOAP_FMAC2 soap_instantiate___ns1__getRegionProvince(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRegionProvince * soap_new___ns1__getRegionProvince(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRegionProvince(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRegionProvince * soap_new_req___ns1__getRegionProvince(
	struct soap *soap)
{
	struct __ns1__getRegionProvince *_p = ::soap_new___ns1__getRegionProvince(soap);
	if (_p)
	{	::soap_default___ns1__getRegionProvince(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRegionProvince * soap_new_set___ns1__getRegionProvince(
	struct soap *soap,
	_ns1__getRegionProvince *ns1__getRegionProvince)
{
	struct __ns1__getRegionProvince *_p = ::soap_new___ns1__getRegionProvince(soap);
	if (_p)
	{	::soap_default___ns1__getRegionProvince(soap, _p);
		_p->ns1__getRegionProvince = ns1__getRegionProvince;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionProvince(struct soap*, const struct __ns1__getRegionProvince *, const char*, const char*);

inline int soap_write___ns1__getRegionProvince(struct soap *soap, struct __ns1__getRegionProvince const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRegionProvince(soap, p), 0) || ::soap_put___ns1__getRegionProvince(soap, p, "-ns1:getRegionProvince", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRegionProvince(struct soap *soap, const char *URL, struct __ns1__getRegionProvince const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionProvince(soap, p), 0) || ::soap_put___ns1__getRegionProvince(soap, p, "-ns1:getRegionProvince", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRegionProvince(struct soap *soap, const char *URL, struct __ns1__getRegionProvince const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionProvince(soap, p), 0) || ::soap_put___ns1__getRegionProvince(soap, p, "-ns1:getRegionProvince", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRegionProvince * SOAP_FMAC4 soap_get___ns1__getRegionProvince(struct soap*, struct __ns1__getRegionProvince *, const char*, const char*);

inline int soap_read___ns1__getRegionProvince(struct soap *soap, struct __ns1__getRegionProvince *p)
{
	if (p)
	{	::soap_default___ns1__getRegionProvince(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRegionProvince(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRegionProvince(struct soap *soap, const char *URL, struct __ns1__getRegionProvince *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRegionProvince(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRegionProvince(struct soap *soap, struct __ns1__getRegionProvince *p)
{
	if (::soap_read___ns1__getRegionProvince(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getRegionDataset_DEFINED
#define SOAP_TYPE___ns1__getRegionDataset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getRegionDataset(struct soap*, struct __ns1__getRegionDataset *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getRegionDataset(struct soap*, const struct __ns1__getRegionDataset *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getRegionDataset(struct soap*, const char*, int, const struct __ns1__getRegionDataset *, const char*);
SOAP_FMAC3 struct __ns1__getRegionDataset * SOAP_FMAC4 soap_in___ns1__getRegionDataset(struct soap*, const char*, struct __ns1__getRegionDataset *, const char*);
SOAP_FMAC1 struct __ns1__getRegionDataset * SOAP_FMAC2 soap_instantiate___ns1__getRegionDataset(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getRegionDataset * soap_new___ns1__getRegionDataset(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getRegionDataset(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getRegionDataset * soap_new_req___ns1__getRegionDataset(
	struct soap *soap)
{
	struct __ns1__getRegionDataset *_p = ::soap_new___ns1__getRegionDataset(soap);
	if (_p)
	{	::soap_default___ns1__getRegionDataset(soap, _p);
	}
	return _p;
}

inline struct __ns1__getRegionDataset * soap_new_set___ns1__getRegionDataset(
	struct soap *soap,
	_ns1__getRegionDataset *ns1__getRegionDataset)
{
	struct __ns1__getRegionDataset *_p = ::soap_new___ns1__getRegionDataset(soap);
	if (_p)
	{	::soap_default___ns1__getRegionDataset(soap, _p);
		_p->ns1__getRegionDataset = ns1__getRegionDataset;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getRegionDataset(struct soap*, const struct __ns1__getRegionDataset *, const char*, const char*);

inline int soap_write___ns1__getRegionDataset(struct soap *soap, struct __ns1__getRegionDataset const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__getRegionDataset(soap, p), 0) || ::soap_put___ns1__getRegionDataset(soap, p, "-ns1:getRegionDataset", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getRegionDataset(struct soap *soap, const char *URL, struct __ns1__getRegionDataset const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionDataset(soap, p), 0) || ::soap_put___ns1__getRegionDataset(soap, p, "-ns1:getRegionDataset", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getRegionDataset(struct soap *soap, const char *URL, struct __ns1__getRegionDataset const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__getRegionDataset(soap, p), 0) || ::soap_put___ns1__getRegionDataset(soap, p, "-ns1:getRegionDataset", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getRegionDataset * SOAP_FMAC4 soap_get___ns1__getRegionDataset(struct soap*, struct __ns1__getRegionDataset *, const char*, const char*);

inline int soap_read___ns1__getRegionDataset(struct soap *soap, struct __ns1__getRegionDataset *p)
{
	if (p)
	{	::soap_default___ns1__getRegionDataset(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__getRegionDataset(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getRegionDataset(struct soap *soap, const char *URL, struct __ns1__getRegionDataset *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__getRegionDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getRegionDataset(struct soap *soap, struct __ns1__getRegionDataset *p)
{
	if (::soap_read___ns1__getRegionDataset(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getWeather_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getWeather_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getWeather(struct soap*, _ns1__getWeather *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getWeather(struct soap*, const char *, int, _ns1__getWeather *const*, const char *);
SOAP_FMAC3 _ns1__getWeather ** SOAP_FMAC4 soap_in_PointerTo_ns1__getWeather(struct soap*, const char*, _ns1__getWeather **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getWeather(struct soap*, _ns1__getWeather *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getWeather ** SOAP_FMAC4 soap_get_PointerTo_ns1__getWeather(struct soap*, _ns1__getWeather **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportCityString_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportCityString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCityString(struct soap*, const char *, int, _ns1__getSupportCityString *const*, const char *);
SOAP_FMAC3 _ns1__getSupportCityString ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCityString(struct soap*, const char*, _ns1__getSupportCityString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportCityString ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportCityDataset_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportCityDataset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCityDataset(struct soap*, const char *, int, _ns1__getSupportCityDataset *const*, const char *);
SOAP_FMAC3 _ns1__getSupportCityDataset ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCityDataset(struct soap*, const char*, _ns1__getSupportCityDataset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportCityDataset ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRegionCountry_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRegionCountry_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionCountry(struct soap*, const char *, int, _ns1__getRegionCountry *const*, const char *);
SOAP_FMAC3 _ns1__getRegionCountry ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionCountry(struct soap*, const char*, _ns1__getRegionCountry **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRegionCountry ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRegionProvince_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRegionProvince_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionProvince(struct soap*, const char *, int, _ns1__getRegionProvince *const*, const char *);
SOAP_FMAC3 _ns1__getRegionProvince ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionProvince(struct soap*, const char*, _ns1__getRegionProvince **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRegionProvince ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRegionDataset_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRegionDataset_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionDataset(struct soap*, const char *, int, _ns1__getRegionDataset *const*, const char *);
SOAP_FMAC3 _ns1__getRegionDataset ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionDataset(struct soap*, const char*, _ns1__getRegionDataset **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRegionDataset ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, const char *, int, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*, const char *);
SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, const char*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(struct soap*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__wstring_DEFINED
#define SOAP_TYPE_PointerTostd__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap*, const char *, int, ns1__ArrayOfString *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap*, const char*, ns1__ArrayOfString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap*, ns1__ArrayOfString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, _ns1__getRegionDatasetResponse_getRegionDatasetResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, const char *, int, _ns1__getRegionDatasetResponse_getRegionDatasetResult *const*, const char *);
SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, const char*, _ns1__getRegionDatasetResponse_getRegionDatasetResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, _ns1__getRegionDatasetResponse_getRegionDatasetResult *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getRegionDatasetResponse_getRegionDatasetResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__getRegionDatasetResponse_getRegionDatasetResult(struct soap*, _ns1__getRegionDatasetResponse_getRegionDatasetResult **, const char*, const char*);
#endif
/* _xsd__schema is a typedef synonym of _XML */

#ifndef SOAP_TYPE__xsd__schema_DEFINED
#define SOAP_TYPE__xsd__schema_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__wstring_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap*, std::vector<std::wstring> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap*, const std::vector<std::wstring> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap*, const char*, int, const std::vector<std::wstring> *, const char*);
SOAP_FMAC3 std::vector<std::wstring> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap*, const char*, std::vector<std::wstring> *, const char*);
SOAP_FMAC1 std::vector<std::wstring>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::wstring>  * soap_new_std__vectorTemplateOfstd__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__wstring(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
